{"ast":null,"code":"/**\n * Service for fetching course content from external APIs\n * Provides dynamic recommendations based on emotion and course\n */\n\n// YouTube API key (in a real app, this would be stored in environment variables)\nconst YOUTUBE_API_KEY = 'AIzaSyATSN1sAjas0MiKmo6RDMdUCZ1aXZReBus';\n\n// List of educational APIs and resources\nconst RESOURCES = {\n  // Khan Academy topics mapping\n  khanAcademy: {\n    \"Computer Science\": \"computer-programming\",\n    \"Mathematics\": \"math\",\n    \"Physics\": \"physics\",\n    \"Chemistry\": \"chemistry\",\n    \"Biology\": \"biology\",\n    \"Economics\": \"economics-finance-domain\",\n    \"Arts & Humanities\": \"humanities\",\n    \"Medicine\": \"health-and-medicine\"\n  },\n  // MIT OpenCourseWare departments\n  mitOpenCourseWare: {\n    \"Computer Science\": \"electrical-engineering-and-computer-science\",\n    \"Mathematics\": \"mathematics\",\n    \"Physics\": \"physics\",\n    \"Chemistry\": \"chemistry\",\n    \"Biology\": \"biology\",\n    \"Economics\": \"economics\",\n    \"Business Administration\": \"management\",\n    \"Mechanical Engineering\": \"mechanical-engineering\",\n    \"Civil Engineering\": \"civil-and-environmental-engineering\"\n  },\n  // Coursera subject mapping\n  coursera: {\n    \"Computer Science\": \"computer-science\",\n    \"Data Science\": \"data-science\",\n    \"Business\": \"business\",\n    \"Mathematics\": \"math-and-logic\",\n    \"Psychology\": \"psychology\",\n    \"Language Learning\": \"language-learning\",\n    \"Information Technology\": \"information-technology\"\n  }\n};\n\n/**\n * Fetch YouTube videos related to a course and emotion\n * @param {string} course - The course name\n * @param {string} emotion - The detected emotion\n * @param {number} maxResults - Maximum number of results to return\n * @returns {Promise<Array>} - Array of video objects\n */\nconst fetchYouTubeVideos = async (course, emotion, maxResults = 3) => {\n  try {\n    // Create search query based on course and learning style from emotion\n    const learningStyles = {\n      happy: \"interactive engaging\",\n      sad: \"gentle supportive\",\n      angry: \"focused practical\",\n      neutral: \"comprehensive\",\n      surprised: \"innovative creative\",\n      fearful: \"step-by-step guided\",\n      disgusted: \"clear structured\",\n      excited: \"challenging advanced\",\n      content: \"in-depth analytical\"\n    };\n    const style = learningStyles[emotion.toLowerCase()] || \"comprehensive\";\n    const query = `${course} ${style} tutorial lecture`;\n\n    // Fetch videos from YouTube API\n    const response = await fetch(`https://www.googleapis.com/youtube/v3/search?part=snippet&maxResults=${maxResults}&q=${encodeURIComponent(query)}&type=video&key=${YOUTUBE_API_KEY}`);\n    if (!response.ok) {\n      throw new Error(`YouTube API error: ${response.status}`);\n    }\n    const data = await response.json();\n\n    // Format the results\n    return data.items.map(item => ({\n      id: item.id.videoId,\n      title: item.snippet.title,\n      description: item.snippet.description,\n      thumbnail: item.snippet.thumbnails.medium.url,\n      url: `https://www.youtube.com/watch?v=${item.id.videoId}`,\n      source: 'YouTube'\n    }));\n  } catch (error) {\n    console.error(\"Error fetching YouTube videos:\", error);\n    return [];\n  }\n};\n\n/**\n * Get Khan Academy resources for a course\n * @param {string} course - The course name\n * @returns {Array} - Array of resource objects\n */\nconst getKhanAcademyResources = course => {\n  // Find the closest matching topic\n  let topic = null;\n  for (const [courseName, topicSlug] of Object.entries(RESOURCES.khanAcademy)) {\n    if (course.toLowerCase().includes(courseName.toLowerCase())) {\n      topic = topicSlug;\n      break;\n    }\n  }\n  if (!topic) {\n    return [];\n  }\n\n  // Return formatted resources\n  return [{\n    title: `${course} Fundamentals`,\n    description: `Learn the basics of ${course} with Khan Academy's comprehensive curriculum.`,\n    url: `https://www.khanacademy.org/${topic}`,\n    source: 'Khan Academy'\n  }];\n};\n\n/**\n * Get MIT OpenCourseWare resources for a course\n * @param {string} course - The course name\n * @returns {Array} - Array of resource objects\n */\nconst getMITOpenCourseWareResources = course => {\n  // Find the closest matching department\n  let department = null;\n  for (const [courseName, deptSlug] of Object.entries(RESOURCES.mitOpenCourseWare)) {\n    if (course.toLowerCase().includes(courseName.toLowerCase())) {\n      department = deptSlug;\n      break;\n    }\n  }\n  if (!department) {\n    return [];\n  }\n\n  // Return formatted resources\n  return [{\n    title: `MIT OpenCourseWare: ${course}`,\n    description: `Free MIT courses and materials for ${course}.`,\n    url: `https://ocw.mit.edu/search/?d=${department}`,\n    source: 'MIT OpenCourseWare'\n  }];\n};\n\n/**\n * Get Coursera courses for a subject\n * @param {string} course - The course name\n * @returns {Array} - Array of resource objects\n */\nconst getCourseraResources = course => {\n  // Find the closest matching subject\n  let subject = null;\n  for (const [courseName, subjectSlug] of Object.entries(RESOURCES.coursera)) {\n    if (course.toLowerCase().includes(courseName.toLowerCase())) {\n      subject = subjectSlug;\n      break;\n    }\n  }\n  if (!subject) {\n    return [];\n  }\n\n  // Return formatted resources\n  return [{\n    title: `Coursera: ${course} Courses`,\n    description: `Online courses in ${course} from top universities and companies.`,\n    url: `https://www.coursera.org/browse/${subject}`,\n    source: 'Coursera'\n  }];\n};\n\n/**\n * Fetch course content from multiple sources\n * @param {string} course - The course name\n * @param {string} emotion - The detected emotion\n * @returns {Promise<Object>} - Object containing resources from different sources\n */\nconst fetchCourseContent = async (course, emotion) => {\n  try {\n    // Fetch YouTube videos\n    const youtubeVideos = await fetchYouTubeVideos(course, emotion);\n\n    // Get resources from other platforms\n    const khanAcademy = getKhanAcademyResources(course);\n    const mitOpenCourseWare = getMITOpenCourseWareResources(course);\n    const coursera = getCourseraResources(course);\n\n    // Combine all resources\n    return {\n      videos: youtubeVideos,\n      resources: [...khanAcademy, ...mitOpenCourseWare, ...coursera]\n    };\n  } catch (error) {\n    console.error(\"Error fetching course content:\", error);\n    return {\n      videos: [],\n      resources: []\n    };\n  }\n};\nexport { fetchCourseContent };","map":{"version":3,"names":["YOUTUBE_API_KEY","RESOURCES","khanAcademy","mitOpenCourseWare","coursera","fetchYouTubeVideos","course","emotion","maxResults","learningStyles","happy","sad","angry","neutral","surprised","fearful","disgusted","excited","content","style","toLowerCase","query","response","fetch","encodeURIComponent","ok","Error","status","data","json","items","map","item","id","videoId","title","snippet","description","thumbnail","thumbnails","medium","url","source","error","console","getKhanAcademyResources","topic","courseName","topicSlug","Object","entries","includes","getMITOpenCourseWareResources","department","deptSlug","getCourseraResources","subject","subjectSlug","fetchCourseContent","youtubeVideos","videos","resources"],"sources":["F:/Symbtest/src/services/courseContentService.js"],"sourcesContent":["/**\n * Service for fetching course content from external APIs\n * Provides dynamic recommendations based on emotion and course\n */\n\n// YouTube API key (in a real app, this would be stored in environment variables)\nconst YOUTUBE_API_KEY = 'AIzaSyATSN1sAjas0MiKmo6RDMdUCZ1aXZReBus';\n\n// List of educational APIs and resources\nconst RESOURCES = {\n  // Khan Academy topics mapping\n  khanAcademy: {\n    \"Computer Science\": \"computer-programming\",\n    \"Mathematics\": \"math\",\n    \"Physics\": \"physics\",\n    \"Chemistry\": \"chemistry\",\n    \"Biology\": \"biology\",\n    \"Economics\": \"economics-finance-domain\",\n    \"Arts & Humanities\": \"humanities\",\n    \"Medicine\": \"health-and-medicine\"\n  },\n  \n  // MIT OpenCourseWare departments\n  mitOpenCourseWare: {\n    \"Computer Science\": \"electrical-engineering-and-computer-science\",\n    \"Mathematics\": \"mathematics\",\n    \"Physics\": \"physics\",\n    \"Chemistry\": \"chemistry\",\n    \"Biology\": \"biology\",\n    \"Economics\": \"economics\",\n    \"Business Administration\": \"management\",\n    \"Mechanical Engineering\": \"mechanical-engineering\",\n    \"Civil Engineering\": \"civil-and-environmental-engineering\"\n  },\n  \n  // Coursera subject mapping\n  coursera: {\n    \"Computer Science\": \"computer-science\",\n    \"Data Science\": \"data-science\",\n    \"Business\": \"business\",\n    \"Mathematics\": \"math-and-logic\",\n    \"Psychology\": \"psychology\",\n    \"Language Learning\": \"language-learning\",\n    \"Information Technology\": \"information-technology\"\n  }\n};\n\n/**\n * Fetch YouTube videos related to a course and emotion\n * @param {string} course - The course name\n * @param {string} emotion - The detected emotion\n * @param {number} maxResults - Maximum number of results to return\n * @returns {Promise<Array>} - Array of video objects\n */\nconst fetchYouTubeVideos = async (course, emotion, maxResults = 3) => {\n  try {\n    // Create search query based on course and learning style from emotion\n    const learningStyles = {\n      happy: \"interactive engaging\",\n      sad: \"gentle supportive\",\n      angry: \"focused practical\",\n      neutral: \"comprehensive\",\n      surprised: \"innovative creative\",\n      fearful: \"step-by-step guided\",\n      disgusted: \"clear structured\",\n      excited: \"challenging advanced\",\n      content: \"in-depth analytical\"\n    };\n    \n    const style = learningStyles[emotion.toLowerCase()] || \"comprehensive\";\n    const query = `${course} ${style} tutorial lecture`;\n    \n    // Fetch videos from YouTube API\n    const response = await fetch(\n      `https://www.googleapis.com/youtube/v3/search?part=snippet&maxResults=${maxResults}&q=${encodeURIComponent(query)}&type=video&key=${YOUTUBE_API_KEY}`\n    );\n    \n    if (!response.ok) {\n      throw new Error(`YouTube API error: ${response.status}`);\n    }\n    \n    const data = await response.json();\n    \n    // Format the results\n    return data.items.map(item => ({\n      id: item.id.videoId,\n      title: item.snippet.title,\n      description: item.snippet.description,\n      thumbnail: item.snippet.thumbnails.medium.url,\n      url: `https://www.youtube.com/watch?v=${item.id.videoId}`,\n      source: 'YouTube'\n    }));\n  } catch (error) {\n    console.error(\"Error fetching YouTube videos:\", error);\n    return [];\n  }\n};\n\n/**\n * Get Khan Academy resources for a course\n * @param {string} course - The course name\n * @returns {Array} - Array of resource objects\n */\nconst getKhanAcademyResources = (course) => {\n  // Find the closest matching topic\n  let topic = null;\n  for (const [courseName, topicSlug] of Object.entries(RESOURCES.khanAcademy)) {\n    if (course.toLowerCase().includes(courseName.toLowerCase())) {\n      topic = topicSlug;\n      break;\n    }\n  }\n  \n  if (!topic) {\n    return [];\n  }\n  \n  // Return formatted resources\n  return [\n    {\n      title: `${course} Fundamentals`,\n      description: `Learn the basics of ${course} with Khan Academy's comprehensive curriculum.`,\n      url: `https://www.khanacademy.org/${topic}`,\n      source: 'Khan Academy'\n    }\n  ];\n};\n\n/**\n * Get MIT OpenCourseWare resources for a course\n * @param {string} course - The course name\n * @returns {Array} - Array of resource objects\n */\nconst getMITOpenCourseWareResources = (course) => {\n  // Find the closest matching department\n  let department = null;\n  for (const [courseName, deptSlug] of Object.entries(RESOURCES.mitOpenCourseWare)) {\n    if (course.toLowerCase().includes(courseName.toLowerCase())) {\n      department = deptSlug;\n      break;\n    }\n  }\n  \n  if (!department) {\n    return [];\n  }\n  \n  // Return formatted resources\n  return [\n    {\n      title: `MIT OpenCourseWare: ${course}`,\n      description: `Free MIT courses and materials for ${course}.`,\n      url: `https://ocw.mit.edu/search/?d=${department}`,\n      source: 'MIT OpenCourseWare'\n    }\n  ];\n};\n\n/**\n * Get Coursera courses for a subject\n * @param {string} course - The course name\n * @returns {Array} - Array of resource objects\n */\nconst getCourseraResources = (course) => {\n  // Find the closest matching subject\n  let subject = null;\n  for (const [courseName, subjectSlug] of Object.entries(RESOURCES.coursera)) {\n    if (course.toLowerCase().includes(courseName.toLowerCase())) {\n      subject = subjectSlug;\n      break;\n    }\n  }\n  \n  if (!subject) {\n    return [];\n  }\n  \n  // Return formatted resources\n  return [\n    {\n      title: `Coursera: ${course} Courses`,\n      description: `Online courses in ${course} from top universities and companies.`,\n      url: `https://www.coursera.org/browse/${subject}`,\n      source: 'Coursera'\n    }\n  ];\n};\n\n/**\n * Fetch course content from multiple sources\n * @param {string} course - The course name\n * @param {string} emotion - The detected emotion\n * @returns {Promise<Object>} - Object containing resources from different sources\n */\nconst fetchCourseContent = async (course, emotion) => {\n  try {\n    // Fetch YouTube videos\n    const youtubeVideos = await fetchYouTubeVideos(course, emotion);\n    \n    // Get resources from other platforms\n    const khanAcademy = getKhanAcademyResources(course);\n    const mitOpenCourseWare = getMITOpenCourseWareResources(course);\n    const coursera = getCourseraResources(course);\n    \n    // Combine all resources\n    return {\n      videos: youtubeVideos,\n      resources: [...khanAcademy, ...mitOpenCourseWare, ...coursera]\n    };\n  } catch (error) {\n    console.error(\"Error fetching course content:\", error);\n    return { videos: [], resources: [] };\n  }\n};\n\nexport { fetchCourseContent };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}