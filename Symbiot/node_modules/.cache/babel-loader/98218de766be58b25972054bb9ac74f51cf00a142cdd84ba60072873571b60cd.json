{"ast":null,"code":"/**\n * Advanced Input Analysis Service\n * Analyzes user input to determine intent, questions, and topics\n */\n\n// Question patterns for detecting different types of questions\nconst questionPatterns = {\n  howTo: [/how (do|can|should|would) (i|you|we|they|one)/i, /what('s| is) the (best|right|proper|recommended) way to/i, /what steps (should|do) (i|you|we|they)/i, /guide|tutorial|instructions|steps|process/i],\n  factual: [/what (is|are|was|were)/i, /who (is|are|was|were)/i, /where (is|are|was|were)/i, /when (is|are|was|were)/i, /why (is|are|was|were)/i, /can you (tell|explain)/i, /do you know/i],\n  opinion: [/what do you think/i, /how do you feel/i, /your (thoughts|opinion|take|perspective)/i, /would you recommend/i, /is it (good|bad|worth|better)/i, /should i/i],\n  clarification: [/what do you mean/i, /can you clarify/i, /i don't understand/i, /that doesn't make sense/i, /confused|unclear|ambiguous/i],\n  personal: [/how are you/i, /what('s| is) your name/i, /who are you/i, /tell me about yourself/i, /what can you do/i, /your (capabilities|functions|features)/i],\n  preference: [/do you (like|enjoy|prefer|love|hate)/i, /what('s| is) your favorite/i, /would you rather/i]\n};\n\n// Topic detection patterns\nconst topicPatterns = {\n  study: [/study(ing)?|learn(ing)?|education|school|college|university|course|class|lecture|assignment|homework|exam|test|quiz|grade/i],\n  subject: [/math|mathematics|algebra|calculus|geometry|trigonometry/i, /science|biology|chemistry|physics|astronomy|geology/i, /history|geography|economics|politics|sociology|psychology/i, /literature|language|grammar|writing|reading|poetry|essay/i, /art|music|painting|drawing|sculpture|photography/i, /computer|programming|coding|software|hardware|technology/i],\n  career: [/job|career|profession|work|employment|resume|interview|hiring|salary|wage/i, /company|business|industry|market|startup|entrepreneur/i],\n  health: [/health|fitness|exercise|workout|diet|nutrition|food|eating|sleep|rest|stress|anxiety|depression|mental health/i],\n  entertainment: [/movie|film|tv|television|show|series|episode|actor|actress|director|book|novel|author|game|gaming|play/i],\n  technology: [/computer|laptop|phone|smartphone|tablet|device|software|app|application|website|internet|online|digital/i],\n  personal: [/family|friend|relationship|partner|spouse|marriage|dating|love|emotion|feeling|life|personal/i]\n};\n\n// Sentiment patterns\nconst sentimentPatterns = {\n  positive: [/good|great|excellent|amazing|wonderful|fantastic|awesome|brilliant|outstanding|superb|terrific|fabulous/i, /happy|glad|pleased|delighted|content|satisfied|joy|enjoy|love|like|appreciate|grateful|thankful/i, /excited|thrilled|enthusiastic|eager|interested|curious|motivated|inspired|impressed|hopeful/i],\n  negative: [/bad|terrible|horrible|awful|poor|disappointing|frustrating|annoying|irritating|infuriating/i, /sad|unhappy|upset|depressed|miserable|gloomy|disappointed|discouraged|disheartened/i, /angry|mad|furious|outraged|enraged|hostile|bitter|resentful|indignant|irate/i, /afraid|scared|frightened|terrified|anxious|worried|nervous|uneasy|apprehensive|concerned/i, /confused|puzzled|perplexed|unsure|uncertain|unclear|ambiguous|bewildered|disoriented/i, /tired|exhausted|sleepy|fatigued|drained|weary|worn out|lethargic|drowsy|sluggish/i, /stressed|overwhelmed|pressured|burdened|overloaded|tense|strained|frazzled|swamped/i],\n  neutral: [/okay|fine|alright|so-so|average|neutral|indifferent|neither|balanced|moderate|standard|typical/i, /normal|regular|ordinary|common|everyday|usual|routine|standard|conventional|traditional/i]\n};\n\n// Command patterns\nconst commandPatterns = {\n  help: [/help( me)?|assist( me)?|support( me)?/i, /i need (help|assistance|support)/i],\n  suggestion: [/suggest|recommend|advise|propose|offer/i, /give me (a|some) (suggestion|recommendation|advice|idea|tip)/i, /what should i/i],\n  explanation: [/explain|describe|elaborate|clarify|define/i, /tell me (about|how|why|what|when|where)/i, /i want to (know|understand|learn)/i]\n};\n\n/**\n * Analyzes user input to determine intent, questions, topics, and sentiment\n * @param {string} input - The user's input text\n * @returns {Object} - Analysis results\n */\nconst analyzeInput = input => {\n  if (!input || input.trim() === '') {\n    return {\n      isEmpty: true,\n      isQuestion: false,\n      questionTypes: [],\n      topics: [],\n      sentiment: 'neutral',\n      commands: [],\n      originalInput: input\n    };\n  }\n  const cleanInput = input.trim();\n\n  // Detect if input is a question\n  const isQuestion = /\\?$/.test(cleanInput) || /^(what|who|where|when|why|how|can|could|would|should|is|are|do|does|did)/i.test(cleanInput);\n\n  // Detect question types\n  const questionTypes = [];\n  for (const [type, patterns] of Object.entries(questionPatterns)) {\n    for (const pattern of patterns) {\n      if (pattern.test(cleanInput)) {\n        questionTypes.push(type);\n        break;\n      }\n    }\n  }\n\n  // Detect topics\n  const topics = [];\n  for (const [topic, patterns] of Object.entries(topicPatterns)) {\n    for (const pattern of patterns) {\n      if (pattern.test(cleanInput)) {\n        topics.push(topic);\n        break;\n      }\n    }\n  }\n\n  // Detect sentiment\n  let sentiment = 'neutral';\n  let sentimentScore = {\n    positive: 0,\n    negative: 0,\n    neutral: 0\n  };\n  for (const [type, patterns] of Object.entries(sentimentPatterns)) {\n    for (const pattern of patterns) {\n      const matches = cleanInput.match(pattern);\n      if (matches) {\n        sentimentScore[type] += matches.length;\n      }\n    }\n  }\n\n  // Determine dominant sentiment\n  if (sentimentScore.positive > sentimentScore.negative && sentimentScore.positive > sentimentScore.neutral) {\n    sentiment = 'positive';\n  } else if (sentimentScore.negative > sentimentScore.positive && sentimentScore.negative > sentimentScore.neutral) {\n    sentiment = 'negative';\n  }\n\n  // Detect commands\n  const commands = [];\n  for (const [command, patterns] of Object.entries(commandPatterns)) {\n    for (const pattern of patterns) {\n      if (pattern.test(cleanInput)) {\n        commands.push(command);\n        break;\n      }\n    }\n  }\n  return {\n    isEmpty: false,\n    isQuestion,\n    questionTypes: [...new Set(questionTypes)],\n    topics: [...new Set(topics)],\n    sentiment,\n    commands: [...new Set(commands)],\n    originalInput: cleanInput\n  };\n};\nexport { analyzeInput };","map":{"version":3,"names":["questionPatterns","howTo","factual","opinion","clarification","personal","preference","topicPatterns","study","subject","career","health","entertainment","technology","sentimentPatterns","positive","negative","neutral","commandPatterns","help","suggestion","explanation","analyzeInput","input","trim","isEmpty","isQuestion","questionTypes","topics","sentiment","commands","originalInput","cleanInput","test","type","patterns","Object","entries","pattern","push","topic","sentimentScore","matches","match","length","command","Set"],"sources":["F:/MindEase/Symbiot/src/services/inputAnalysisService.js"],"sourcesContent":["/**\n * Advanced Input Analysis Service\n * Analyzes user input to determine intent, questions, and topics\n */\n\n// Question patterns for detecting different types of questions\nconst questionPatterns = {\n  howTo: [\n    /how (do|can|should|would) (i|you|we|they|one)/i,\n    /what('s| is) the (best|right|proper|recommended) way to/i,\n    /what steps (should|do) (i|you|we|they)/i,\n    /guide|tutorial|instructions|steps|process/i\n  ],\n  \n  factual: [\n    /what (is|are|was|were)/i,\n    /who (is|are|was|were)/i,\n    /where (is|are|was|were)/i,\n    /when (is|are|was|were)/i,\n    /why (is|are|was|were)/i,\n    /can you (tell|explain)/i,\n    /do you know/i\n  ],\n  \n  opinion: [\n    /what do you think/i,\n    /how do you feel/i,\n    /your (thoughts|opinion|take|perspective)/i,\n    /would you recommend/i,\n    /is it (good|bad|worth|better)/i,\n    /should i/i\n  ],\n  \n  clarification: [\n    /what do you mean/i,\n    /can you clarify/i,\n    /i don't understand/i,\n    /that doesn't make sense/i,\n    /confused|unclear|ambiguous/i\n  ],\n  \n  personal: [\n    /how are you/i,\n    /what('s| is) your name/i,\n    /who are you/i,\n    /tell me about yourself/i,\n    /what can you do/i,\n    /your (capabilities|functions|features)/i\n  ],\n  \n  preference: [\n    /do you (like|enjoy|prefer|love|hate)/i,\n    /what('s| is) your favorite/i,\n    /would you rather/i\n  ]\n};\n\n// Topic detection patterns\nconst topicPatterns = {\n  study: [\n    /study(ing)?|learn(ing)?|education|school|college|university|course|class|lecture|assignment|homework|exam|test|quiz|grade/i\n  ],\n  \n  subject: [\n    /math|mathematics|algebra|calculus|geometry|trigonometry/i,\n    /science|biology|chemistry|physics|astronomy|geology/i,\n    /history|geography|economics|politics|sociology|psychology/i,\n    /literature|language|grammar|writing|reading|poetry|essay/i,\n    /art|music|painting|drawing|sculpture|photography/i,\n    /computer|programming|coding|software|hardware|technology/i\n  ],\n  \n  career: [\n    /job|career|profession|work|employment|resume|interview|hiring|salary|wage/i,\n    /company|business|industry|market|startup|entrepreneur/i\n  ],\n  \n  health: [\n    /health|fitness|exercise|workout|diet|nutrition|food|eating|sleep|rest|stress|anxiety|depression|mental health/i\n  ],\n  \n  entertainment: [\n    /movie|film|tv|television|show|series|episode|actor|actress|director|book|novel|author|game|gaming|play/i\n  ],\n  \n  technology: [\n    /computer|laptop|phone|smartphone|tablet|device|software|app|application|website|internet|online|digital/i\n  ],\n  \n  personal: [\n    /family|friend|relationship|partner|spouse|marriage|dating|love|emotion|feeling|life|personal/i\n  ]\n};\n\n// Sentiment patterns\nconst sentimentPatterns = {\n  positive: [\n    /good|great|excellent|amazing|wonderful|fantastic|awesome|brilliant|outstanding|superb|terrific|fabulous/i,\n    /happy|glad|pleased|delighted|content|satisfied|joy|enjoy|love|like|appreciate|grateful|thankful/i,\n    /excited|thrilled|enthusiastic|eager|interested|curious|motivated|inspired|impressed|hopeful/i\n  ],\n  \n  negative: [\n    /bad|terrible|horrible|awful|poor|disappointing|frustrating|annoying|irritating|infuriating/i,\n    /sad|unhappy|upset|depressed|miserable|gloomy|disappointed|discouraged|disheartened/i,\n    /angry|mad|furious|outraged|enraged|hostile|bitter|resentful|indignant|irate/i,\n    /afraid|scared|frightened|terrified|anxious|worried|nervous|uneasy|apprehensive|concerned/i,\n    /confused|puzzled|perplexed|unsure|uncertain|unclear|ambiguous|bewildered|disoriented/i,\n    /tired|exhausted|sleepy|fatigued|drained|weary|worn out|lethargic|drowsy|sluggish/i,\n    /stressed|overwhelmed|pressured|burdened|overloaded|tense|strained|frazzled|swamped/i\n  ],\n  \n  neutral: [\n    /okay|fine|alright|so-so|average|neutral|indifferent|neither|balanced|moderate|standard|typical/i,\n    /normal|regular|ordinary|common|everyday|usual|routine|standard|conventional|traditional/i\n  ]\n};\n\n// Command patterns\nconst commandPatterns = {\n  help: [\n    /help( me)?|assist( me)?|support( me)?/i,\n    /i need (help|assistance|support)/i\n  ],\n  \n  suggestion: [\n    /suggest|recommend|advise|propose|offer/i,\n    /give me (a|some) (suggestion|recommendation|advice|idea|tip)/i,\n    /what should i/i\n  ],\n  \n  explanation: [\n    /explain|describe|elaborate|clarify|define/i,\n    /tell me (about|how|why|what|when|where)/i,\n    /i want to (know|understand|learn)/i\n  ]\n};\n\n/**\n * Analyzes user input to determine intent, questions, topics, and sentiment\n * @param {string} input - The user's input text\n * @returns {Object} - Analysis results\n */\nconst analyzeInput = (input) => {\n  if (!input || input.trim() === '') {\n    return {\n      isEmpty: true,\n      isQuestion: false,\n      questionTypes: [],\n      topics: [],\n      sentiment: 'neutral',\n      commands: [],\n      originalInput: input\n    };\n  }\n  \n  const cleanInput = input.trim();\n  \n  // Detect if input is a question\n  const isQuestion = /\\?$/.test(cleanInput) || \n                    /^(what|who|where|when|why|how|can|could|would|should|is|are|do|does|did)/i.test(cleanInput);\n  \n  // Detect question types\n  const questionTypes = [];\n  for (const [type, patterns] of Object.entries(questionPatterns)) {\n    for (const pattern of patterns) {\n      if (pattern.test(cleanInput)) {\n        questionTypes.push(type);\n        break;\n      }\n    }\n  }\n  \n  // Detect topics\n  const topics = [];\n  for (const [topic, patterns] of Object.entries(topicPatterns)) {\n    for (const pattern of patterns) {\n      if (pattern.test(cleanInput)) {\n        topics.push(topic);\n        break;\n      }\n    }\n  }\n  \n  // Detect sentiment\n  let sentiment = 'neutral';\n  let sentimentScore = {\n    positive: 0,\n    negative: 0,\n    neutral: 0\n  };\n  \n  for (const [type, patterns] of Object.entries(sentimentPatterns)) {\n    for (const pattern of patterns) {\n      const matches = cleanInput.match(pattern);\n      if (matches) {\n        sentimentScore[type] += matches.length;\n      }\n    }\n  }\n  \n  // Determine dominant sentiment\n  if (sentimentScore.positive > sentimentScore.negative && \n      sentimentScore.positive > sentimentScore.neutral) {\n    sentiment = 'positive';\n  } else if (sentimentScore.negative > sentimentScore.positive && \n             sentimentScore.negative > sentimentScore.neutral) {\n    sentiment = 'negative';\n  }\n  \n  // Detect commands\n  const commands = [];\n  for (const [command, patterns] of Object.entries(commandPatterns)) {\n    for (const pattern of patterns) {\n      if (pattern.test(cleanInput)) {\n        commands.push(command);\n        break;\n      }\n    }\n  }\n  \n  return {\n    isEmpty: false,\n    isQuestion,\n    questionTypes: [...new Set(questionTypes)],\n    topics: [...new Set(topics)],\n    sentiment,\n    commands: [...new Set(commands)],\n    originalInput: cleanInput\n  };\n};\n\nexport { analyzeInput };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}