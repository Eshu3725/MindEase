{"ast":null,"code":"/**\n * Helper functions for authentication\n */\n\n/**\n * Check if a provider is properly configured in Firebase\n * @param {Object} provider - The Firebase auth provider\n * @returns {Promise<boolean>} - True if the provider is configured, false otherwise\n */\nexport const isProviderConfigured = async provider => {\n  try {\n    // Try to get provider data\n    const providerId = provider.providerId;\n\n    // For Facebook, check if app ID is set\n    if (providerId === 'facebook.com') {\n      // Facebook requires an app ID to be configured in Firebase console\n      const params = provider.customParameters;\n      if (!params || !params.client_id) {\n        console.warn('Facebook provider may not be properly configured in Firebase console');\n        return false;\n      }\n    }\n\n    // For Twitter, check if API key is set\n    if (providerId === 'twitter.com') {\n      // Twitter requires API key to be configured in Firebase console\n      const params = provider.customParameters;\n      if (!params || !params.oauth_consumer_key) {\n        console.warn('Twitter provider may not be properly configured in Firebase console');\n        return false;\n      }\n    }\n    return true;\n  } catch (error) {\n    console.error('Error checking provider configuration:', error);\n    return false;\n  }\n};\n\n/**\n * Format authentication error messages for user display\n * @param {Error} error - The Firebase auth error\n * @returns {string} - User-friendly error message\n */\nexport const formatAuthError = error => {\n  if (!error) return 'An unknown error occurred';\n\n  // Handle specific Firebase auth error codes\n  switch (error.code) {\n    case 'auth/account-exists-with-different-credential':\n      return 'An account already exists with the same email address but different sign-in credentials. Sign in using a provider associated with this email address.';\n    case 'auth/cancelled-popup-request':\n    case 'auth/popup-closed-by-user':\n      return 'The authentication popup was closed before completing the sign in process.';\n    case 'auth/popup-blocked':\n      return 'The authentication popup was blocked by the browser. Please allow popups for this website.';\n    case 'auth/unauthorized-domain':\n      return 'This domain is not authorized for OAuth operations. Please contact the administrator.';\n    case 'auth/operation-not-allowed':\n      return 'This authentication provider is not enabled. Please contact the administrator.';\n    case 'auth/invalid-email':\n      return 'The email address is not valid.';\n    case 'auth/user-disabled':\n      return 'This user account has been disabled.';\n    case 'auth/user-not-found':\n    case 'auth/wrong-password':\n      return 'Invalid email or password.';\n    case 'auth/too-many-requests':\n      return 'Too many unsuccessful login attempts. Please try again later.';\n    case 'auth/network-request-failed':\n      return 'A network error occurred. Please check your internet connection.';\n    default:\n      return error.message || 'An error occurred during authentication.';\n  }\n};","map":{"version":3,"names":["isProviderConfigured","provider","providerId","params","customParameters","client_id","console","warn","oauth_consumer_key","error","formatAuthError","code","message"],"sources":["F:/MindEase/Symbiot/src/utils/authHelpers.js"],"sourcesContent":["/**\n * Helper functions for authentication\n */\n\n/**\n * Check if a provider is properly configured in Firebase\n * @param {Object} provider - The Firebase auth provider\n * @returns {Promise<boolean>} - True if the provider is configured, false otherwise\n */\nexport const isProviderConfigured = async (provider) => {\n  try {\n    // Try to get provider data\n    const providerId = provider.providerId;\n    \n    // For Facebook, check if app ID is set\n    if (providerId === 'facebook.com') {\n      // Facebook requires an app ID to be configured in Firebase console\n      const params = provider.customParameters;\n      if (!params || !params.client_id) {\n        console.warn('Facebook provider may not be properly configured in Firebase console');\n        return false;\n      }\n    }\n    \n    // For Twitter, check if API key is set\n    if (providerId === 'twitter.com') {\n      // Twitter requires API key to be configured in Firebase console\n      const params = provider.customParameters;\n      if (!params || !params.oauth_consumer_key) {\n        console.warn('Twitter provider may not be properly configured in Firebase console');\n        return false;\n      }\n    }\n    \n    return true;\n  } catch (error) {\n    console.error('Error checking provider configuration:', error);\n    return false;\n  }\n};\n\n/**\n * Format authentication error messages for user display\n * @param {Error} error - The Firebase auth error\n * @returns {string} - User-friendly error message\n */\nexport const formatAuthError = (error) => {\n  if (!error) return 'An unknown error occurred';\n  \n  // Handle specific Firebase auth error codes\n  switch (error.code) {\n    case 'auth/account-exists-with-different-credential':\n      return 'An account already exists with the same email address but different sign-in credentials. Sign in using a provider associated with this email address.';\n    case 'auth/cancelled-popup-request':\n    case 'auth/popup-closed-by-user':\n      return 'The authentication popup was closed before completing the sign in process.';\n    case 'auth/popup-blocked':\n      return 'The authentication popup was blocked by the browser. Please allow popups for this website.';\n    case 'auth/unauthorized-domain':\n      return 'This domain is not authorized for OAuth operations. Please contact the administrator.';\n    case 'auth/operation-not-allowed':\n      return 'This authentication provider is not enabled. Please contact the administrator.';\n    case 'auth/invalid-email':\n      return 'The email address is not valid.';\n    case 'auth/user-disabled':\n      return 'This user account has been disabled.';\n    case 'auth/user-not-found':\n    case 'auth/wrong-password':\n      return 'Invalid email or password.';\n    case 'auth/too-many-requests':\n      return 'Too many unsuccessful login attempts. Please try again later.';\n    case 'auth/network-request-failed':\n      return 'A network error occurred. Please check your internet connection.';\n    default:\n      return error.message || 'An error occurred during authentication.';\n  }\n};\n"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,oBAAoB,GAAG,MAAOC,QAAQ,IAAK;EACtD,IAAI;IACF;IACA,MAAMC,UAAU,GAAGD,QAAQ,CAACC,UAAU;;IAEtC;IACA,IAAIA,UAAU,KAAK,cAAc,EAAE;MACjC;MACA,MAAMC,MAAM,GAAGF,QAAQ,CAACG,gBAAgB;MACxC,IAAI,CAACD,MAAM,IAAI,CAACA,MAAM,CAACE,SAAS,EAAE;QAChCC,OAAO,CAACC,IAAI,CAAC,sEAAsE,CAAC;QACpF,OAAO,KAAK;MACd;IACF;;IAEA;IACA,IAAIL,UAAU,KAAK,aAAa,EAAE;MAChC;MACA,MAAMC,MAAM,GAAGF,QAAQ,CAACG,gBAAgB;MACxC,IAAI,CAACD,MAAM,IAAI,CAACA,MAAM,CAACK,kBAAkB,EAAE;QACzCF,OAAO,CAACC,IAAI,CAAC,qEAAqE,CAAC;QACnF,OAAO,KAAK;MACd;IACF;IAEA,OAAO,IAAI;EACb,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdH,OAAO,CAACG,KAAK,CAAC,wCAAwC,EAAEA,KAAK,CAAC;IAC9D,OAAO,KAAK;EACd;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,eAAe,GAAID,KAAK,IAAK;EACxC,IAAI,CAACA,KAAK,EAAE,OAAO,2BAA2B;;EAE9C;EACA,QAAQA,KAAK,CAACE,IAAI;IAChB,KAAK,+CAA+C;MAClD,OAAO,uJAAuJ;IAChK,KAAK,8BAA8B;IACnC,KAAK,2BAA2B;MAC9B,OAAO,4EAA4E;IACrF,KAAK,oBAAoB;MACvB,OAAO,4FAA4F;IACrG,KAAK,0BAA0B;MAC7B,OAAO,uFAAuF;IAChG,KAAK,4BAA4B;MAC/B,OAAO,gFAAgF;IACzF,KAAK,oBAAoB;MACvB,OAAO,iCAAiC;IAC1C,KAAK,oBAAoB;MACvB,OAAO,sCAAsC;IAC/C,KAAK,qBAAqB;IAC1B,KAAK,qBAAqB;MACxB,OAAO,4BAA4B;IACrC,KAAK,wBAAwB;MAC3B,OAAO,+DAA+D;IACxE,KAAK,6BAA6B;MAChC,OAAO,kEAAkE;IAC3E;MACE,OAAOF,KAAK,CAACG,OAAO,IAAI,0CAA0C;EACtE;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}