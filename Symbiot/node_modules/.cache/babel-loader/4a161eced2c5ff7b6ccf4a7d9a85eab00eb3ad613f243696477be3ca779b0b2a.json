{"ast":null,"code":"var _jsxFileName = \"F:\\\\Symbtest\\\\src\\\\pages\\\\Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { auth } from '../firebase';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = 'http://localhost:5000/api'; // Update with your actual backend URL\n\n// Fallback responses for when the backend is unavailable\nconst FALLBACK_RESPONSES = [{\n  keywords: ['hello', 'hi', 'hey', 'greetings'],\n  responses: [\"Hello! How are you feeling today?\", \"Hi there! I'm here to support you. How can I help?\", \"Hey! It's good to see you. How's your day going?\"]\n}, {\n  keywords: ['sad', 'unhappy', 'depressed', 'down', 'blue'],\n  responses: [\"I'm sorry to hear you're feeling down. Remember that it's okay to feel this way sometimes. Would you like to talk about what's bothering you?\", \"It sounds like you're going through a difficult time. Remember that these feelings won't last forever. What might help you feel a bit better right now?\", \"I understand feeling sad can be really tough. Have you tried any self-care activities today that might help lift your mood?\"]\n}, {\n  keywords: ['anxious', 'worried', 'nervous', 'stress', 'stressed'],\n  responses: [\"Anxiety can be really challenging. Have you tried any breathing exercises? Taking slow, deep breaths can help calm your nervous system.\", \"When you're feeling anxious, it can help to ground yourself. Try naming 5 things you can see, 4 things you can touch, 3 things you can hear, 2 things you can smell, and 1 thing you can taste.\", \"I understand anxiety can feel overwhelming. Remember that you've gotten through difficult moments before, and you can get through this too.\"]\n}, {\n  keywords: ['happy', 'good', 'great', 'wonderful', 'amazing', 'excellent'],\n  responses: [\"I'm so glad to hear you're feeling good! What's contributed to your positive mood today?\", \"That's wonderful! Celebrating these positive moments is important. What are you most grateful for right now?\", \"It's great that you're feeling happy! Is there something specific that's bringing you joy today?\"]\n}, {\n  keywords: ['tired', 'exhausted', 'sleepy', 'fatigue'],\n  responses: [\"Being tired can really affect how we feel. Have you been able to get enough rest lately?\", \"Feeling exhausted can make everything harder. Is there a way you could schedule some extra rest time today?\", \"When we're tired, even small tasks can feel overwhelming. Be gentle with yourself and prioritize rest when you can.\"]\n}, {\n  keywords: ['help', 'support', 'resources'],\n  responses: [\"I'm here to support you. Would you like to talk about specific resources for mental health support?\", \"There are many resources available to help. Would you like to explore some options together?\", \"Support comes in many forms. Would you prefer to talk about professional help, self-help strategies, or community resources?\"]\n}];\nconst Chatbot = () => {\n  _s();\n  const [messages, setMessages] = useState([{\n    text: \"Hi there! I'm your AI companion. How can I help you today?\",\n    sender: 'bot'\n  }]);\n  const [input, setInput] = useState('');\n  const [isTyping, setIsTyping] = useState(false);\n  const [error, setError] = useState(null);\n  const messagesEndRef = useRef(null);\n  const [mood, setMood] = useState('');\n\n  // Get current user's mood from localStorage if available\n  useEffect(() => {\n    const savedMood = localStorage.getItem('selectedMood');\n    if (savedMood) {\n      try {\n        const parsedMood = JSON.parse(savedMood);\n        setMood(parsedMood.label);\n      } catch (e) {\n        console.error('Error parsing mood:', e);\n      }\n    }\n  }, []);\n\n  // Auto-scroll to bottom of messages\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  }, [messages]);\n\n  // Get user ID for conversation tracking\n  const getUserId = () => {\n    const user = auth.currentUser;\n    return user ? user.uid : 'anonymous';\n  };\n\n  // Function to get a fallback response based on user input\n  const getFallbackResponse = input => {\n    const lowercaseInput = input.toLowerCase();\n\n    // Check for keyword matches\n    for (const category of FALLBACK_RESPONSES) {\n      for (const keyword of category.keywords) {\n        if (lowercaseInput.includes(keyword)) {\n          // Return a random response from this category\n          const responses = category.responses;\n          return responses[Math.floor(Math.random() * responses.length)];\n        }\n      }\n    }\n\n    // If no keyword matches, return a generic response\n    const genericResponses = [\"I'm here to listen. Could you tell me more about that?\", \"Thank you for sharing. How does that make you feel?\", \"I understand. What do you think might help in this situation?\", \"That's interesting. Would you like to explore this topic further?\", \"I appreciate you opening up. Is there anything specific you'd like guidance on?\"];\n    return genericResponses[Math.floor(Math.random() * genericResponses.length)];\n  };\n  const handleSendMessage = async e => {\n    e.preventDefault();\n    if (!input.trim()) return;\n\n    // Add user message\n    const userMessage = {\n      text: input,\n      sender: 'user'\n    };\n    setMessages(prev => [...prev, userMessage]);\n    const userInput = input;\n    setInput('');\n    setIsTyping(true);\n    setError(null);\n    try {\n      console.log('Sending request to:', `${API_URL}/ai/analyze-emotion`);\n      console.log('User input:', userInput);\n\n      // First, analyze the emotion in the message\n      const emotionResponse = await fetch(`${API_URL}/ai/analyze-emotion`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          text: userInput\n        })\n      });\n      console.log('Emotion response status:', emotionResponse.status);\n      if (!emotionResponse.ok) {\n        const errorText = await emotionResponse.text();\n        console.error('Emotion analysis error response:', errorText);\n        throw new Error(`Failed to analyze emotion: ${emotionResponse.status} ${errorText}`);\n      }\n      const emotionData = await emotionResponse.json();\n      console.log('Emotion data:', emotionData);\n\n      // Then, send the message to the AI chatbot with emotion context\n      console.log('Sending chat request to:', `${API_URL}/ai/chat`);\n      const chatPayload = {\n        message: userInput,\n        userId: getUserId(),\n        mood: mood || emotionData.primaryEmotion,\n        emotionIntensity: emotionData.intensity\n      };\n      console.log('Chat request payload:', chatPayload);\n      const chatResponse = await fetch(`${API_URL}/ai/chat`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(chatPayload)\n      });\n      console.log('Chat response status:', chatResponse.status);\n      if (!chatResponse.ok) {\n        const errorText = await chatResponse.text();\n        console.error('Chat error response:', errorText);\n        throw new Error(`Failed to get response from AI: ${chatResponse.status} ${errorText}`);\n      }\n      const data = await chatResponse.json();\n      console.log('Chat response data:', data);\n\n      // Add AI response to messages\n      setMessages(prev => [...prev, {\n        text: data.response,\n        sender: 'bot',\n        emotion: emotionData.primaryEmotion,\n        suggestion: emotionData.suggestion\n      }]);\n    } catch (err) {\n      console.error('Error communicating with AI:', err);\n\n      // Create a more detailed error message for debugging\n      const errorMessage = err.message || 'Unknown error';\n      const detailedError = `Sorry, I had trouble responding. Error: ${errorMessage}`;\n\n      // Check if this is a connection error that we can handle with fallback\n      const isConnectionError = errorMessage.includes('Failed to fetch') || errorMessage.includes('NetworkError') || errorMessage.includes('404') || errorMessage.includes('500');\n      if (isConnectionError) {\n        // Use fallback mode without showing error message\n        console.log('Using fallback mode due to connection error');\n\n        // Get a context-aware fallback response based on the user's input\n        const fallbackResponse = getFallbackResponse(userInput);\n\n        // Only show the fallback response, not the error\n        setMessages(prev => [...prev, {\n          text: fallbackResponse,\n          sender: 'bot',\n          isFallback: true\n        }]);\n\n        // Set a subtle notification about offline mode at the bottom\n        setError('Using offline mode due to connection issues.');\n      } else {\n        // For other errors, show the error message\n        setError(detailedError);\n        setMessages(prev => [...prev, {\n          text: 'Sorry, I had trouble responding. Please try again.',\n          sender: 'bot',\n          isError: true,\n          detailedError: errorMessage\n        }]);\n      }\n    } finally {\n      setIsTyping(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"max-w-4xl mx-auto\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-3xl font-bold text-[#66FCF1] mb-6\",\n      children: \"\\uD83E\\uDD16 AI Companion\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 7\n    }, this), mood && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-4 bg-[#1F2833] p-3 rounded-lg text-[#CFC6C7] flex items-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"mr-2\",\n        children: \"Current mood:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"text-[#66FCF1] font-medium\",\n        children: mood\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-[#1F2833] rounded-xl shadow-lg overflow-hidden flex flex-col h-[70vh]\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex-1 overflow-y-auto p-4 space-y-4\",\n        children: [messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `flex ${message.sender === 'user' ? 'justify-end' : 'justify-start'}`,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `max-w-[80%] rounded-xl p-3 ${message.sender === 'user' ? 'bg-[#45A29E] text-white' : message.isError ? 'bg-red-900/30 text-[#CFC6C7] border border-red-700' : 'bg-[#0B0C10] text-[#CFC6C7]'}`,\n            children: [message.text, message.sender === 'bot' && message.emotion && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mt-2 pt-2 border-t border-[#45A29E]/30 text-xs text-[#66FCF1]/70\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                children: [\"Detected emotion: \", message.emotion]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 275,\n                columnNumber: 21\n              }, this), message.suggestion && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"mt-1 italic\",\n                children: message.suggestion\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 277,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 274,\n              columnNumber: 19\n            }, this), message.sender === 'bot' && message.isError && message.detailedError && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mt-2 pt-2 border-t border-red-500/30 text-xs text-red-400/70\",\n              children: /*#__PURE__*/_jsxDEV(\"details\", {\n                children: [/*#__PURE__*/_jsxDEV(\"summary\", {\n                  className: \"cursor-pointer\",\n                  children: \"Show error details\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 286,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"mt-1 whitespace-pre-wrap\",\n                  children: message.detailedError\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 287,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 285,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 284,\n              columnNumber: 19\n            }, this), message.sender === 'bot' && message.isFallback && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mt-2 pt-2 border-t border-[#45A29E]/20 text-xs text-[#45A29E]/50\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"text-[10px]\",\n                children: \"offline mode\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 295,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 294,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 15\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 13\n        }, this)), isTyping && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex justify-start\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bg-[#0B0C10] text-[#CFC6C7] rounded-xl p-3 max-w-[80%]\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"flex space-x-2\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"w-2 h-2 rounded-full bg-[#66FCF1] animate-bounce\",\n                style: {\n                  animationDelay: '0ms'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 307,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"w-2 h-2 rounded-full bg-[#66FCF1] animate-bounce\",\n                style: {\n                  animationDelay: '300ms'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 308,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"w-2 h-2 rounded-full bg-[#66FCF1] animate-bounce\",\n                style: {\n                  animationDelay: '600ms'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 309,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 306,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 305,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 13\n        }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `text-center text-xs py-2 ${error.includes('offline mode') ? 'text-[#45A29E]/70' : 'text-red-400'}`,\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: messagesEndRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSendMessage,\n        className: \"p-4 border-t border-[#45A29E] bg-[#0B0C10]\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: input,\n            onChange: e => setInput(e.target.value),\n            placeholder: \"Type your message...\",\n            className: \"flex-1 bg-[#1F2833] text-[#CFC6C7] p-3 rounded-l-lg focus:outline-none focus:ring-1 focus:ring-[#66FCF1]\",\n            disabled: isTyping\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 332,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: `px-4 rounded-r-lg font-semibold transition-colors ${isTyping ? 'bg-gray-500 text-gray-300 cursor-not-allowed' : 'bg-[#66FCF1] text-[#0B0C10] hover:bg-[#45A29E]'}`,\n            disabled: isTyping,\n            children: isTyping ? 'Thinking...' : 'Send'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 340,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 331,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 244,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot, \"5zD9or6twyflJhzScO8ze64MgOI=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useEffect","useRef","auth","jsxDEV","_jsxDEV","API_URL","FALLBACK_RESPONSES","keywords","responses","Chatbot","_s","messages","setMessages","text","sender","input","setInput","isTyping","setIsTyping","error","setError","messagesEndRef","mood","setMood","savedMood","localStorage","getItem","parsedMood","JSON","parse","label","e","console","_messagesEndRef$curre","current","scrollIntoView","behavior","getUserId","user","currentUser","uid","getFallbackResponse","lowercaseInput","toLowerCase","category","keyword","includes","Math","floor","random","length","genericResponses","handleSendMessage","preventDefault","trim","userMessage","prev","userInput","log","emotionResponse","fetch","method","headers","body","stringify","status","ok","errorText","Error","emotionData","json","chatPayload","message","userId","primaryEmotion","emotionIntensity","intensity","chatResponse","data","response","emotion","suggestion","err","errorMessage","detailedError","isConnectionError","fallbackResponse","isFallback","isError","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","index","style","animationDelay","ref","onSubmit","type","value","onChange","target","placeholder","disabled","_c","$RefreshReg$"],"sources":["F:/Symbtest/src/pages/Chatbot.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { auth } from '../firebase';\n\nconst API_URL = 'http://localhost:5000/api'; // Update with your actual backend URL\n\n// Fallback responses for when the backend is unavailable\nconst FALLBACK_RESPONSES = [\n  {\n    keywords: ['hello', 'hi', 'hey', 'greetings'],\n    responses: [\n      \"Hello! How are you feeling today?\",\n      \"Hi there! I'm here to support you. How can I help?\",\n      \"Hey! It's good to see you. How's your day going?\"\n    ]\n  },\n  {\n    keywords: ['sad', 'unhappy', 'depressed', 'down', 'blue'],\n    responses: [\n      \"I'm sorry to hear you're feeling down. Remember that it's okay to feel this way sometimes. Would you like to talk about what's bothering you?\",\n      \"It sounds like you're going through a difficult time. Remember that these feelings won't last forever. What might help you feel a bit better right now?\",\n      \"I understand feeling sad can be really tough. Have you tried any self-care activities today that might help lift your mood?\"\n    ]\n  },\n  {\n    keywords: ['anxious', 'worried', 'nervous', 'stress', 'stressed'],\n    responses: [\n      \"Anxiety can be really challenging. Have you tried any breathing exercises? Taking slow, deep breaths can help calm your nervous system.\",\n      \"When you're feeling anxious, it can help to ground yourself. Try naming 5 things you can see, 4 things you can touch, 3 things you can hear, 2 things you can smell, and 1 thing you can taste.\",\n      \"I understand anxiety can feel overwhelming. Remember that you've gotten through difficult moments before, and you can get through this too.\"\n    ]\n  },\n  {\n    keywords: ['happy', 'good', 'great', 'wonderful', 'amazing', 'excellent'],\n    responses: [\n      \"I'm so glad to hear you're feeling good! What's contributed to your positive mood today?\",\n      \"That's wonderful! Celebrating these positive moments is important. What are you most grateful for right now?\",\n      \"It's great that you're feeling happy! Is there something specific that's bringing you joy today?\"\n    ]\n  },\n  {\n    keywords: ['tired', 'exhausted', 'sleepy', 'fatigue'],\n    responses: [\n      \"Being tired can really affect how we feel. Have you been able to get enough rest lately?\",\n      \"Feeling exhausted can make everything harder. Is there a way you could schedule some extra rest time today?\",\n      \"When we're tired, even small tasks can feel overwhelming. Be gentle with yourself and prioritize rest when you can.\"\n    ]\n  },\n  {\n    keywords: ['help', 'support', 'resources'],\n    responses: [\n      \"I'm here to support you. Would you like to talk about specific resources for mental health support?\",\n      \"There are many resources available to help. Would you like to explore some options together?\",\n      \"Support comes in many forms. Would you prefer to talk about professional help, self-help strategies, or community resources?\"\n    ]\n  }\n];\n\nconst Chatbot = () => {\n  const [messages, setMessages] = useState([\n    {\n      text: \"Hi there! I'm your AI companion. How can I help you today?\",\n      sender: 'bot'\n    }\n  ]);\n  const [input, setInput] = useState('');\n  const [isTyping, setIsTyping] = useState(false);\n  const [error, setError] = useState(null);\n  const messagesEndRef = useRef(null);\n  const [mood, setMood] = useState('');\n\n  // Get current user's mood from localStorage if available\n  useEffect(() => {\n    const savedMood = localStorage.getItem('selectedMood');\n    if (savedMood) {\n      try {\n        const parsedMood = JSON.parse(savedMood);\n        setMood(parsedMood.label);\n      } catch (e) {\n        console.error('Error parsing mood:', e);\n      }\n    }\n  }, []);\n\n  // Auto-scroll to bottom of messages\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  }, [messages]);\n\n  // Get user ID for conversation tracking\n  const getUserId = () => {\n    const user = auth.currentUser;\n    return user ? user.uid : 'anonymous';\n  };\n\n  // Function to get a fallback response based on user input\n  const getFallbackResponse = (input) => {\n    const lowercaseInput = input.toLowerCase();\n\n    // Check for keyword matches\n    for (const category of FALLBACK_RESPONSES) {\n      for (const keyword of category.keywords) {\n        if (lowercaseInput.includes(keyword)) {\n          // Return a random response from this category\n          const responses = category.responses;\n          return responses[Math.floor(Math.random() * responses.length)];\n        }\n      }\n    }\n\n    // If no keyword matches, return a generic response\n    const genericResponses = [\n      \"I'm here to listen. Could you tell me more about that?\",\n      \"Thank you for sharing. How does that make you feel?\",\n      \"I understand. What do you think might help in this situation?\",\n      \"That's interesting. Would you like to explore this topic further?\",\n      \"I appreciate you opening up. Is there anything specific you'd like guidance on?\"\n    ];\n\n    return genericResponses[Math.floor(Math.random() * genericResponses.length)];\n  };\n\n  const handleSendMessage = async (e) => {\n    e.preventDefault();\n\n    if (!input.trim()) return;\n\n    // Add user message\n    const userMessage = { text: input, sender: 'user' };\n    setMessages(prev => [...prev, userMessage]);\n\n    const userInput = input;\n    setInput('');\n    setIsTyping(true);\n    setError(null);\n\n    try {\n      console.log('Sending request to:', `${API_URL}/ai/analyze-emotion`);\n      console.log('User input:', userInput);\n\n      // First, analyze the emotion in the message\n      const emotionResponse = await fetch(`${API_URL}/ai/analyze-emotion`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          text: userInput\n        }),\n      });\n\n      console.log('Emotion response status:', emotionResponse.status);\n\n      if (!emotionResponse.ok) {\n        const errorText = await emotionResponse.text();\n        console.error('Emotion analysis error response:', errorText);\n        throw new Error(`Failed to analyze emotion: ${emotionResponse.status} ${errorText}`);\n      }\n\n      const emotionData = await emotionResponse.json();\n      console.log('Emotion data:', emotionData);\n\n      // Then, send the message to the AI chatbot with emotion context\n      console.log('Sending chat request to:', `${API_URL}/ai/chat`);\n      const chatPayload = {\n        message: userInput,\n        userId: getUserId(),\n        mood: mood || emotionData.primaryEmotion,\n        emotionIntensity: emotionData.intensity\n      };\n      console.log('Chat request payload:', chatPayload);\n\n      const chatResponse = await fetch(`${API_URL}/ai/chat`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(chatPayload),\n      });\n\n      console.log('Chat response status:', chatResponse.status);\n\n      if (!chatResponse.ok) {\n        const errorText = await chatResponse.text();\n        console.error('Chat error response:', errorText);\n        throw new Error(`Failed to get response from AI: ${chatResponse.status} ${errorText}`);\n      }\n\n      const data = await chatResponse.json();\n      console.log('Chat response data:', data);\n\n      // Add AI response to messages\n      setMessages(prev => [...prev, {\n        text: data.response,\n        sender: 'bot',\n        emotion: emotionData.primaryEmotion,\n        suggestion: emotionData.suggestion\n      }]);\n    } catch (err) {\n      console.error('Error communicating with AI:', err);\n\n      // Create a more detailed error message for debugging\n      const errorMessage = err.message || 'Unknown error';\n      const detailedError = `Sorry, I had trouble responding. Error: ${errorMessage}`;\n\n      // Check if this is a connection error that we can handle with fallback\n      const isConnectionError =\n        errorMessage.includes('Failed to fetch') ||\n        errorMessage.includes('NetworkError') ||\n        errorMessage.includes('404') ||\n        errorMessage.includes('500');\n\n      if (isConnectionError) {\n        // Use fallback mode without showing error message\n        console.log('Using fallback mode due to connection error');\n\n        // Get a context-aware fallback response based on the user's input\n        const fallbackResponse = getFallbackResponse(userInput);\n\n        // Only show the fallback response, not the error\n        setMessages(prev => [...prev, {\n          text: fallbackResponse,\n          sender: 'bot',\n          isFallback: true\n        }]);\n\n        // Set a subtle notification about offline mode at the bottom\n        setError('Using offline mode due to connection issues.');\n      } else {\n        // For other errors, show the error message\n        setError(detailedError);\n        setMessages(prev => [...prev, {\n          text: 'Sorry, I had trouble responding. Please try again.',\n          sender: 'bot',\n          isError: true,\n          detailedError: errorMessage\n        }]);\n      }\n    } finally {\n      setIsTyping(false);\n    }\n  };\n\n  return (\n    <div className=\"max-w-4xl mx-auto\">\n      <h1 className=\"text-3xl font-bold text-[#66FCF1] mb-6\">🤖 AI Companion</h1>\n\n      {mood && (\n        <div className=\"mb-4 bg-[#1F2833] p-3 rounded-lg text-[#CFC6C7] flex items-center\">\n          <span className=\"mr-2\">Current mood:</span>\n          <span className=\"text-[#66FCF1] font-medium\">{mood}</span>\n        </div>\n      )}\n\n      <div className=\"bg-[#1F2833] rounded-xl shadow-lg overflow-hidden flex flex-col h-[70vh]\">\n        <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n          {messages.map((message, index) => (\n            <div\n              key={index}\n              className={`flex ${message.sender === 'user' ? 'justify-end' : 'justify-start'}`}\n            >\n              <div\n                className={`max-w-[80%] rounded-xl p-3 ${\n                  message.sender === 'user'\n                    ? 'bg-[#45A29E] text-white'\n                    : message.isError\n                      ? 'bg-red-900/30 text-[#CFC6C7] border border-red-700'\n                      : 'bg-[#0B0C10] text-[#CFC6C7]'\n                }`}\n              >\n                {message.text}\n\n                {/* Show emotion analysis and suggestion for bot messages */}\n                {message.sender === 'bot' && message.emotion && (\n                  <div className=\"mt-2 pt-2 border-t border-[#45A29E]/30 text-xs text-[#66FCF1]/70\">\n                    <div>Detected emotion: {message.emotion}</div>\n                    {message.suggestion && (\n                      <div className=\"mt-1 italic\">{message.suggestion}</div>\n                    )}\n                  </div>\n                )}\n\n                {/* Show detailed error for debugging */}\n                {message.sender === 'bot' && message.isError && message.detailedError && (\n                  <div className=\"mt-2 pt-2 border-t border-red-500/30 text-xs text-red-400/70\">\n                    <details>\n                      <summary className=\"cursor-pointer\">Show error details</summary>\n                      <div className=\"mt-1 whitespace-pre-wrap\">{message.detailedError}</div>\n                    </details>\n                  </div>\n                )}\n\n                {/* Show fallback indicator - very subtle */}\n                {message.sender === 'bot' && message.isFallback && (\n                  <div className=\"mt-2 pt-2 border-t border-[#45A29E]/20 text-xs text-[#45A29E]/50\">\n                    <div className=\"text-[10px]\">offline mode</div>\n                  </div>\n                )}\n              </div>\n            </div>\n          ))}\n\n          {/* Typing indicator */}\n          {isTyping && (\n            <div className=\"flex justify-start\">\n              <div className=\"bg-[#0B0C10] text-[#CFC6C7] rounded-xl p-3 max-w-[80%]\">\n                <div className=\"flex space-x-2\">\n                  <div className=\"w-2 h-2 rounded-full bg-[#66FCF1] animate-bounce\" style={{ animationDelay: '0ms' }}></div>\n                  <div className=\"w-2 h-2 rounded-full bg-[#66FCF1] animate-bounce\" style={{ animationDelay: '300ms' }}></div>\n                  <div className=\"w-2 h-2 rounded-full bg-[#66FCF1] animate-bounce\" style={{ animationDelay: '600ms' }}></div>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Error message - different styling based on if it's offline mode or a real error */}\n          {error && (\n            <div className={`text-center text-xs py-2 ${\n              error.includes('offline mode')\n                ? 'text-[#45A29E]/70'\n                : 'text-red-400'\n            }`}>\n              {error}\n            </div>\n          )}\n\n          {/* Auto-scroll reference */}\n          <div ref={messagesEndRef} />\n        </div>\n\n        <form onSubmit={handleSendMessage} className=\"p-4 border-t border-[#45A29E] bg-[#0B0C10]\">\n          <div className=\"flex\">\n            <input\n              type=\"text\"\n              value={input}\n              onChange={(e) => setInput(e.target.value)}\n              placeholder=\"Type your message...\"\n              className=\"flex-1 bg-[#1F2833] text-[#CFC6C7] p-3 rounded-l-lg focus:outline-none focus:ring-1 focus:ring-[#66FCF1]\"\n              disabled={isTyping}\n            />\n            <button\n              type=\"submit\"\n              className={`px-4 rounded-r-lg font-semibold transition-colors ${\n                isTyping\n                  ? 'bg-gray-500 text-gray-300 cursor-not-allowed'\n                  : 'bg-[#66FCF1] text-[#0B0C10] hover:bg-[#45A29E]'\n              }`}\n              disabled={isTyping}\n            >\n              {isTyping ? 'Thinking...' : 'Send'}\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default Chatbot;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,SAASC,IAAI,QAAQ,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnC,MAAMC,OAAO,GAAG,2BAA2B,CAAC,CAAC;;AAE7C;AACA,MAAMC,kBAAkB,GAAG,CACzB;EACEC,QAAQ,EAAE,CAAC,OAAO,EAAE,IAAI,EAAE,KAAK,EAAE,WAAW,CAAC;EAC7CC,SAAS,EAAE,CACT,mCAAmC,EACnC,oDAAoD,EACpD,kDAAkD;AAEtD,CAAC,EACD;EACED,QAAQ,EAAE,CAAC,KAAK,EAAE,SAAS,EAAE,WAAW,EAAE,MAAM,EAAE,MAAM,CAAC;EACzDC,SAAS,EAAE,CACT,+IAA+I,EAC/I,yJAAyJ,EACzJ,6HAA6H;AAEjI,CAAC,EACD;EACED,QAAQ,EAAE,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,QAAQ,EAAE,UAAU,CAAC;EACjEC,SAAS,EAAE,CACT,yIAAyI,EACzI,iMAAiM,EACjM,6IAA6I;AAEjJ,CAAC,EACD;EACED,QAAQ,EAAE,CAAC,OAAO,EAAE,MAAM,EAAE,OAAO,EAAE,WAAW,EAAE,SAAS,EAAE,WAAW,CAAC;EACzEC,SAAS,EAAE,CACT,0FAA0F,EAC1F,8GAA8G,EAC9G,kGAAkG;AAEtG,CAAC,EACD;EACED,QAAQ,EAAE,CAAC,OAAO,EAAE,WAAW,EAAE,QAAQ,EAAE,SAAS,CAAC;EACrDC,SAAS,EAAE,CACT,0FAA0F,EAC1F,6GAA6G,EAC7G,qHAAqH;AAEzH,CAAC,EACD;EACED,QAAQ,EAAE,CAAC,MAAM,EAAE,SAAS,EAAE,WAAW,CAAC;EAC1CC,SAAS,EAAE,CACT,qGAAqG,EACrG,8FAA8F,EAC9F,8HAA8H;AAElI,CAAC,CACF;AAED,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGb,QAAQ,CAAC,CACvC;IACEc,IAAI,EAAE,4DAA4D;IAClEC,MAAM,EAAE;EACV,CAAC,CACF,CAAC;EACF,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACkB,QAAQ,EAAEC,WAAW,CAAC,GAAGnB,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAM,CAACoB,KAAK,EAAEC,QAAQ,CAAC,GAAGrB,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAMsB,cAAc,GAAGpB,MAAM,CAAC,IAAI,CAAC;EACnC,MAAM,CAACqB,IAAI,EAAEC,OAAO,CAAC,GAAGxB,QAAQ,CAAC,EAAE,CAAC;;EAEpC;EACAC,SAAS,CAAC,MAAM;IACd,MAAMwB,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;IACtD,IAAIF,SAAS,EAAE;MACb,IAAI;QACF,MAAMG,UAAU,GAAGC,IAAI,CAACC,KAAK,CAACL,SAAS,CAAC;QACxCD,OAAO,CAACI,UAAU,CAACG,KAAK,CAAC;MAC3B,CAAC,CAAC,OAAOC,CAAC,EAAE;QACVC,OAAO,CAACb,KAAK,CAAC,qBAAqB,EAAEY,CAAC,CAAC;MACzC;IACF;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA/B,SAAS,CAAC,MAAM;IAAA,IAAAiC,qBAAA;IACd,CAAAA,qBAAA,GAAAZ,cAAc,CAACa,OAAO,cAAAD,qBAAA,uBAAtBA,qBAAA,CAAwBE,cAAc,CAAC;MAAEC,QAAQ,EAAE;IAAS,CAAC,CAAC;EAChE,CAAC,EAAE,CAACzB,QAAQ,CAAC,CAAC;;EAEd;EACA,MAAM0B,SAAS,GAAGA,CAAA,KAAM;IACtB,MAAMC,IAAI,GAAGpC,IAAI,CAACqC,WAAW;IAC7B,OAAOD,IAAI,GAAGA,IAAI,CAACE,GAAG,GAAG,WAAW;EACtC,CAAC;;EAED;EACA,MAAMC,mBAAmB,GAAI1B,KAAK,IAAK;IACrC,MAAM2B,cAAc,GAAG3B,KAAK,CAAC4B,WAAW,CAAC,CAAC;;IAE1C;IACA,KAAK,MAAMC,QAAQ,IAAItC,kBAAkB,EAAE;MACzC,KAAK,MAAMuC,OAAO,IAAID,QAAQ,CAACrC,QAAQ,EAAE;QACvC,IAAImC,cAAc,CAACI,QAAQ,CAACD,OAAO,CAAC,EAAE;UACpC;UACA,MAAMrC,SAAS,GAAGoC,QAAQ,CAACpC,SAAS;UACpC,OAAOA,SAAS,CAACuC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGzC,SAAS,CAAC0C,MAAM,CAAC,CAAC;QAChE;MACF;IACF;;IAEA;IACA,MAAMC,gBAAgB,GAAG,CACvB,wDAAwD,EACxD,qDAAqD,EACrD,+DAA+D,EAC/D,mEAAmE,EACnE,iFAAiF,CAClF;IAED,OAAOA,gBAAgB,CAACJ,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGE,gBAAgB,CAACD,MAAM,CAAC,CAAC;EAC9E,CAAC;EAED,MAAME,iBAAiB,GAAG,MAAOrB,CAAC,IAAK;IACrCA,CAAC,CAACsB,cAAc,CAAC,CAAC;IAElB,IAAI,CAACtC,KAAK,CAACuC,IAAI,CAAC,CAAC,EAAE;;IAEnB;IACA,MAAMC,WAAW,GAAG;MAAE1C,IAAI,EAAEE,KAAK;MAAED,MAAM,EAAE;IAAO,CAAC;IACnDF,WAAW,CAAC4C,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAED,WAAW,CAAC,CAAC;IAE3C,MAAME,SAAS,GAAG1C,KAAK;IACvBC,QAAQ,CAAC,EAAE,CAAC;IACZE,WAAW,CAAC,IAAI,CAAC;IACjBE,QAAQ,CAAC,IAAI,CAAC;IAEd,IAAI;MACFY,OAAO,CAAC0B,GAAG,CAAC,qBAAqB,EAAE,GAAGrD,OAAO,qBAAqB,CAAC;MACnE2B,OAAO,CAAC0B,GAAG,CAAC,aAAa,EAAED,SAAS,CAAC;;MAErC;MACA,MAAME,eAAe,GAAG,MAAMC,KAAK,CAAC,GAAGvD,OAAO,qBAAqB,EAAE;QACnEwD,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEnC,IAAI,CAACoC,SAAS,CAAC;UACnBnD,IAAI,EAAE4C;QACR,CAAC;MACH,CAAC,CAAC;MAEFzB,OAAO,CAAC0B,GAAG,CAAC,0BAA0B,EAAEC,eAAe,CAACM,MAAM,CAAC;MAE/D,IAAI,CAACN,eAAe,CAACO,EAAE,EAAE;QACvB,MAAMC,SAAS,GAAG,MAAMR,eAAe,CAAC9C,IAAI,CAAC,CAAC;QAC9CmB,OAAO,CAACb,KAAK,CAAC,kCAAkC,EAAEgD,SAAS,CAAC;QAC5D,MAAM,IAAIC,KAAK,CAAC,8BAA8BT,eAAe,CAACM,MAAM,IAAIE,SAAS,EAAE,CAAC;MACtF;MAEA,MAAME,WAAW,GAAG,MAAMV,eAAe,CAACW,IAAI,CAAC,CAAC;MAChDtC,OAAO,CAAC0B,GAAG,CAAC,eAAe,EAAEW,WAAW,CAAC;;MAEzC;MACArC,OAAO,CAAC0B,GAAG,CAAC,0BAA0B,EAAE,GAAGrD,OAAO,UAAU,CAAC;MAC7D,MAAMkE,WAAW,GAAG;QAClBC,OAAO,EAAEf,SAAS;QAClBgB,MAAM,EAAEpC,SAAS,CAAC,CAAC;QACnBf,IAAI,EAAEA,IAAI,IAAI+C,WAAW,CAACK,cAAc;QACxCC,gBAAgB,EAAEN,WAAW,CAACO;MAChC,CAAC;MACD5C,OAAO,CAAC0B,GAAG,CAAC,uBAAuB,EAAEa,WAAW,CAAC;MAEjD,MAAMM,YAAY,GAAG,MAAMjB,KAAK,CAAC,GAAGvD,OAAO,UAAU,EAAE;QACrDwD,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEnC,IAAI,CAACoC,SAAS,CAACO,WAAW;MAClC,CAAC,CAAC;MAEFvC,OAAO,CAAC0B,GAAG,CAAC,uBAAuB,EAAEmB,YAAY,CAACZ,MAAM,CAAC;MAEzD,IAAI,CAACY,YAAY,CAACX,EAAE,EAAE;QACpB,MAAMC,SAAS,GAAG,MAAMU,YAAY,CAAChE,IAAI,CAAC,CAAC;QAC3CmB,OAAO,CAACb,KAAK,CAAC,sBAAsB,EAAEgD,SAAS,CAAC;QAChD,MAAM,IAAIC,KAAK,CAAC,mCAAmCS,YAAY,CAACZ,MAAM,IAAIE,SAAS,EAAE,CAAC;MACxF;MAEA,MAAMW,IAAI,GAAG,MAAMD,YAAY,CAACP,IAAI,CAAC,CAAC;MACtCtC,OAAO,CAAC0B,GAAG,CAAC,qBAAqB,EAAEoB,IAAI,CAAC;;MAExC;MACAlE,WAAW,CAAC4C,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAE;QAC5B3C,IAAI,EAAEiE,IAAI,CAACC,QAAQ;QACnBjE,MAAM,EAAE,KAAK;QACbkE,OAAO,EAAEX,WAAW,CAACK,cAAc;QACnCO,UAAU,EAAEZ,WAAW,CAACY;MAC1B,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZlD,OAAO,CAACb,KAAK,CAAC,8BAA8B,EAAE+D,GAAG,CAAC;;MAElD;MACA,MAAMC,YAAY,GAAGD,GAAG,CAACV,OAAO,IAAI,eAAe;MACnD,MAAMY,aAAa,GAAG,2CAA2CD,YAAY,EAAE;;MAE/E;MACA,MAAME,iBAAiB,GACrBF,YAAY,CAACrC,QAAQ,CAAC,iBAAiB,CAAC,IACxCqC,YAAY,CAACrC,QAAQ,CAAC,cAAc,CAAC,IACrCqC,YAAY,CAACrC,QAAQ,CAAC,KAAK,CAAC,IAC5BqC,YAAY,CAACrC,QAAQ,CAAC,KAAK,CAAC;MAE9B,IAAIuC,iBAAiB,EAAE;QACrB;QACArD,OAAO,CAAC0B,GAAG,CAAC,6CAA6C,CAAC;;QAE1D;QACA,MAAM4B,gBAAgB,GAAG7C,mBAAmB,CAACgB,SAAS,CAAC;;QAEvD;QACA7C,WAAW,CAAC4C,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAE;UAC5B3C,IAAI,EAAEyE,gBAAgB;UACtBxE,MAAM,EAAE,KAAK;UACbyE,UAAU,EAAE;QACd,CAAC,CAAC,CAAC;;QAEH;QACAnE,QAAQ,CAAC,8CAA8C,CAAC;MAC1D,CAAC,MAAM;QACL;QACAA,QAAQ,CAACgE,aAAa,CAAC;QACvBxE,WAAW,CAAC4C,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAE;UAC5B3C,IAAI,EAAE,oDAAoD;UAC1DC,MAAM,EAAE,KAAK;UACb0E,OAAO,EAAE,IAAI;UACbJ,aAAa,EAAED;QACjB,CAAC,CAAC,CAAC;MACL;IACF,CAAC,SAAS;MACRjE,WAAW,CAAC,KAAK,CAAC;IACpB;EACF,CAAC;EAED,oBACEd,OAAA;IAAKqF,SAAS,EAAC,mBAAmB;IAAAC,QAAA,gBAChCtF,OAAA;MAAIqF,SAAS,EAAC,wCAAwC;MAAAC,QAAA,EAAC;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAE1ExE,IAAI,iBACHlB,OAAA;MAAKqF,SAAS,EAAC,mEAAmE;MAAAC,QAAA,gBAChFtF,OAAA;QAAMqF,SAAS,EAAC,MAAM;QAAAC,QAAA,EAAC;MAAa;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,eAC3C1F,OAAA;QAAMqF,SAAS,EAAC,4BAA4B;QAAAC,QAAA,EAAEpE;MAAI;QAAAqE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvD,CACN,eAED1F,OAAA;MAAKqF,SAAS,EAAC,0EAA0E;MAAAC,QAAA,gBACvFtF,OAAA;QAAKqF,SAAS,EAAC,sCAAsC;QAAAC,QAAA,GAClD/E,QAAQ,CAACoF,GAAG,CAAC,CAACvB,OAAO,EAAEwB,KAAK,kBAC3B5F,OAAA;UAEEqF,SAAS,EAAE,QAAQjB,OAAO,CAAC1D,MAAM,KAAK,MAAM,GAAG,aAAa,GAAG,eAAe,EAAG;UAAA4E,QAAA,eAEjFtF,OAAA;YACEqF,SAAS,EAAE,8BACTjB,OAAO,CAAC1D,MAAM,KAAK,MAAM,GACrB,yBAAyB,GACzB0D,OAAO,CAACgB,OAAO,GACb,oDAAoD,GACpD,6BAA6B,EAClC;YAAAE,QAAA,GAEFlB,OAAO,CAAC3D,IAAI,EAGZ2D,OAAO,CAAC1D,MAAM,KAAK,KAAK,IAAI0D,OAAO,CAACQ,OAAO,iBAC1C5E,OAAA;cAAKqF,SAAS,EAAC,kEAAkE;cAAAC,QAAA,gBAC/EtF,OAAA;gBAAAsF,QAAA,GAAK,oBAAkB,EAAClB,OAAO,CAACQ,OAAO;cAAA;gBAAAW,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM,CAAC,EAC7CtB,OAAO,CAACS,UAAU,iBACjB7E,OAAA;gBAAKqF,SAAS,EAAC,aAAa;gBAAAC,QAAA,EAAElB,OAAO,CAACS;cAAU;gBAAAU,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM,CACvD;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACE,CACN,EAGAtB,OAAO,CAAC1D,MAAM,KAAK,KAAK,IAAI0D,OAAO,CAACgB,OAAO,IAAIhB,OAAO,CAACY,aAAa,iBACnEhF,OAAA;cAAKqF,SAAS,EAAC,8DAA8D;cAAAC,QAAA,eAC3EtF,OAAA;gBAAAsF,QAAA,gBACEtF,OAAA;kBAASqF,SAAS,EAAC,gBAAgB;kBAAAC,QAAA,EAAC;gBAAkB;kBAAAC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAS,CAAC,eAChE1F,OAAA;kBAAKqF,SAAS,EAAC,0BAA0B;kBAAAC,QAAA,EAAElB,OAAO,CAACY;gBAAa;kBAAAO,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAM,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAChE;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACP,CACN,EAGAtB,OAAO,CAAC1D,MAAM,KAAK,KAAK,IAAI0D,OAAO,CAACe,UAAU,iBAC7CnF,OAAA;cAAKqF,SAAS,EAAC,kEAAkE;cAAAC,QAAA,eAC/EtF,OAAA;gBAAKqF,SAAS,EAAC,aAAa;gBAAAC,QAAA,EAAC;cAAY;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC5C,CACN;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACE;QAAC,GAxCDE,KAAK;UAAAL,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAyCP,CACN,CAAC,EAGD7E,QAAQ,iBACPb,OAAA;UAAKqF,SAAS,EAAC,oBAAoB;UAAAC,QAAA,eACjCtF,OAAA;YAAKqF,SAAS,EAAC,wDAAwD;YAAAC,QAAA,eACrEtF,OAAA;cAAKqF,SAAS,EAAC,gBAAgB;cAAAC,QAAA,gBAC7BtF,OAAA;gBAAKqF,SAAS,EAAC,kDAAkD;gBAACQ,KAAK,EAAE;kBAAEC,cAAc,EAAE;gBAAM;cAAE;gBAAAP,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM,CAAC,eAC1G1F,OAAA;gBAAKqF,SAAS,EAAC,kDAAkD;gBAACQ,KAAK,EAAE;kBAAEC,cAAc,EAAE;gBAAQ;cAAE;gBAAAP,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM,CAAC,eAC5G1F,OAAA;gBAAKqF,SAAS,EAAC,kDAAkD;gBAACQ,KAAK,EAAE;kBAAEC,cAAc,EAAE;gBAAQ;cAAE;gBAAAP,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACzG;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACH;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CACN,EAGA3E,KAAK,iBACJf,OAAA;UAAKqF,SAAS,EAAE,4BACdtE,KAAK,CAAC2B,QAAQ,CAAC,cAAc,CAAC,GAC1B,mBAAmB,GACnB,cAAc,EACjB;UAAA4C,QAAA,EACAvE;QAAK;UAAAwE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CACN,eAGD1F,OAAA;UAAK+F,GAAG,EAAE9E;QAAe;UAAAsE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACzB,CAAC,eAEN1F,OAAA;QAAMgG,QAAQ,EAAEhD,iBAAkB;QAACqC,SAAS,EAAC,4CAA4C;QAAAC,QAAA,eACvFtF,OAAA;UAAKqF,SAAS,EAAC,MAAM;UAAAC,QAAA,gBACnBtF,OAAA;YACEiG,IAAI,EAAC,MAAM;YACXC,KAAK,EAAEvF,KAAM;YACbwF,QAAQ,EAAGxE,CAAC,IAAKf,QAAQ,CAACe,CAAC,CAACyE,MAAM,CAACF,KAAK,CAAE;YAC1CG,WAAW,EAAC,sBAAsB;YAClChB,SAAS,EAAC,0GAA0G;YACpHiB,QAAQ,EAAEzF;UAAS;YAAA0E,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACpB,CAAC,eACF1F,OAAA;YACEiG,IAAI,EAAC,QAAQ;YACbZ,SAAS,EAAE,qDACTxE,QAAQ,GACJ,8CAA8C,GAC9C,gDAAgD,EACnD;YACHyF,QAAQ,EAAEzF,QAAS;YAAAyE,QAAA,EAElBzE,QAAQ,GAAG,aAAa,GAAG;UAAM;YAAA0E,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC5B,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACF,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACJ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACpF,EAAA,CA1SID,OAAO;AAAAkG,EAAA,GAAPlG,OAAO;AA4Sb,eAAeA,OAAO;AAAC,IAAAkG,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}