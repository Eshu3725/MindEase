{"ast":null,"code":"/**\n * Service for fetching course content from external APIs\n * Provides dynamic recommendations based on emotion and course\n */\n\n// YouTube API key (in a real app, this would be stored in environment variables)\nconst YOUTUBE_API_KEY = 'AIzaSyATSN1sAjas0MiKmo6RDMdUCZ1aXZReBus';\n\n// List of educational APIs and resources\nconst RESOURCES = {\n  // Khan Academy topics mapping\n  khanAcademy: {\n    \"Computer Science\": \"computer-programming\",\n    \"Mathematics\": \"math\",\n    \"Physics\": \"physics\",\n    \"Chemistry\": \"chemistry\",\n    \"Biology\": \"biology\",\n    \"Economics\": \"economics-finance-domain\",\n    \"Arts & Humanities\": \"humanities\",\n    \"Medicine\": \"health-and-medicine\"\n  },\n  // MIT OpenCourseWare departments\n  mitOpenCourseWare: {\n    \"Computer Science\": \"electrical-engineering-and-computer-science\",\n    \"Mathematics\": \"mathematics\",\n    \"Physics\": \"physics\",\n    \"Chemistry\": \"chemistry\",\n    \"Biology\": \"biology\",\n    \"Economics\": \"economics\",\n    \"Business Administration\": \"management\",\n    \"Mechanical Engineering\": \"mechanical-engineering\",\n    \"Civil Engineering\": \"civil-and-environmental-engineering\"\n  },\n  // Coursera subject mapping\n  coursera: {\n    \"Computer Science\": \"computer-science\",\n    \"Data Science\": \"data-science\",\n    \"Business\": \"business\",\n    \"Mathematics\": \"math-and-logic\",\n    \"Psychology\": \"psychology\",\n    \"Language Learning\": \"language-learning\",\n    \"Information Technology\": \"information-technology\"\n  }\n};\n\n/**\n * Fetch YouTube videos related to a course and emotion\n * @param {string} course - The course name\n * @param {string} emotion - The detected emotion\n * @param {number} maxResults - Maximum number of results to return\n * @returns {Promise<Array>} - Array of video objects\n */\nconst fetchYouTubeVideos = async (course, emotion, maxResults = 3) => {\n  try {\n    // Create search query based on course and learning style from emotion\n    const learningStyles = {\n      happy: \"interactive engaging\",\n      sad: \"gentle supportive\",\n      angry: \"focused practical\",\n      neutral: \"comprehensive\",\n      surprised: \"innovative creative\",\n      fearful: \"step-by-step guided\",\n      disgusted: \"clear structured\",\n      excited: \"challenging advanced\",\n      content: \"in-depth analytical\"\n    };\n    const style = learningStyles[emotion.toLowerCase()] || \"comprehensive\";\n    const query = `${course} ${style} tutorial lecture`;\n    console.log(`Searching for: ${query}`);\n\n    // MOCK IMPLEMENTATION - In a real app, this would call the YouTube API\n    // This mock data simulates YouTube API responses for different courses\n    const mockVideos = {\n      \"Computer Science\": [{\n        id: \"zOjov-2OZ0E\",\n        title: \"Introduction to Programming - Basics\",\n        description: \"Learn the fundamentals of programming in this comprehensive tutorial\",\n        thumbnail: \"https://i.ytimg.com/vi/zOjov-2OZ0E/mqdefault.jpg\",\n        url: \"https://www.youtube.com/watch?v=zOjov-2OZ0E\",\n        source: 'YouTube'\n      }, {\n        id: \"RBSGKlAvoiM\",\n        title: \"Data Structures Easy to Advanced Course\",\n        description: \"Learn all about data structures in this comprehensive course\",\n        thumbnail: \"https://i.ytimg.com/vi/RBSGKlAvoiM/mqdefault.jpg\",\n        url: \"https://www.youtube.com/watch?v=RBSGKlAvoiM\",\n        source: 'YouTube'\n      }],\n      \"Mathematics\": [{\n        id: \"WUvTyaaNkzM\",\n        title: \"Calculus 1 - Full College Course\",\n        description: \"Learn Calculus in this full college course\",\n        thumbnail: \"https://i.ytimg.com/vi/WUvTyaaNkzM/mqdefault.jpg\",\n        url: \"https://www.youtube.com/watch?v=WUvTyaaNkzM\",\n        source: 'YouTube'\n      }, {\n        id: \"fNk_zzaMoSs\",\n        title: \"Linear Algebra - Full College Course\",\n        description: \"Learn Linear Algebra in this full college course\",\n        thumbnail: \"https://i.ytimg.com/vi/fNk_zzaMoSs/mqdefault.jpg\",\n        url: \"https://www.youtube.com/watch?v=fNk_zzaMoSs\",\n        source: 'YouTube'\n      }],\n      \"Psychology\": [{\n        id: \"vo4pMVb0R6M\",\n        title: \"Introduction to Psychology\",\n        description: \"Comprehensive introduction to the field of psychology\",\n        thumbnail: \"https://i.ytimg.com/vi/vo4pMVb0R6M/mqdefault.jpg\",\n        url: \"https://www.youtube.com/watch?v=vo4pMVb0R6M\",\n        source: 'YouTube'\n      }, {\n        id: \"R-sVnmmw6WY\",\n        title: \"Cognitive Psychology - Attention and Memory\",\n        description: \"Learn about cognitive processes in this detailed lecture\",\n        thumbnail: \"https://i.ytimg.com/vi/R-sVnmmw6WY/mqdefault.jpg\",\n        url: \"https://www.youtube.com/watch?v=R-sVnmmw6WY\",\n        source: 'YouTube'\n      }]\n    };\n\n    // Find videos for the course or return default videos\n    let videos = [];\n\n    // Try to find exact match\n    if (mockVideos[course]) {\n      videos = mockVideos[course];\n    } else {\n      // Try to find partial match\n      for (const [courseName, courseVideos] of Object.entries(mockVideos)) {\n        if (course.toLowerCase().includes(courseName.toLowerCase()) || courseName.toLowerCase().includes(course.toLowerCase())) {\n          videos = courseVideos;\n          break;\n        }\n      }\n\n      // If still no match, use Computer Science as default\n      if (videos.length === 0) {\n        videos = mockVideos[\"Computer Science\"];\n      }\n    }\n\n    // Simulate delay for API call\n    await new Promise(resolve => setTimeout(resolve, 500));\n    return videos.slice(0, maxResults);\n  } catch (error) {\n    console.error(\"Error fetching YouTube videos:\", error);\n    return [];\n  }\n};\n\n/**\n * Get Khan Academy resources for a course\n * @param {string} course - The course name\n * @returns {Array} - Array of resource objects\n */\nconst getKhanAcademyResources = course => {\n  // Find the closest matching topic\n  let topic = null;\n  for (const [courseName, topicSlug] of Object.entries(RESOURCES.khanAcademy)) {\n    if (course.toLowerCase().includes(courseName.toLowerCase())) {\n      topic = topicSlug;\n      break;\n    }\n  }\n  if (!topic) {\n    return [];\n  }\n\n  // Return formatted resources\n  return [{\n    title: `${course} Fundamentals`,\n    description: `Learn the basics of ${course} with Khan Academy's comprehensive curriculum.`,\n    url: `https://www.khanacademy.org/${topic}`,\n    source: 'Khan Academy'\n  }];\n};\n\n/**\n * Get MIT OpenCourseWare resources for a course\n * @param {string} course - The course name\n * @returns {Array} - Array of resource objects\n */\nconst getMITOpenCourseWareResources = course => {\n  // Find the closest matching department\n  let department = null;\n  for (const [courseName, deptSlug] of Object.entries(RESOURCES.mitOpenCourseWare)) {\n    if (course.toLowerCase().includes(courseName.toLowerCase())) {\n      department = deptSlug;\n      break;\n    }\n  }\n  if (!department) {\n    return [];\n  }\n\n  // Return formatted resources\n  return [{\n    title: `MIT OpenCourseWare: ${course}`,\n    description: `Free MIT courses and materials for ${course}.`,\n    url: `https://ocw.mit.edu/search/?d=${department}`,\n    source: 'MIT OpenCourseWare'\n  }];\n};\n\n/**\n * Get Coursera courses for a subject\n * @param {string} course - The course name\n * @returns {Array} - Array of resource objects\n */\nconst getCourseraResources = course => {\n  // Find the closest matching subject\n  let subject = null;\n  for (const [courseName, subjectSlug] of Object.entries(RESOURCES.coursera)) {\n    if (course.toLowerCase().includes(courseName.toLowerCase())) {\n      subject = subjectSlug;\n      break;\n    }\n  }\n  if (!subject) {\n    return [];\n  }\n\n  // Return formatted resources\n  return [{\n    title: `Coursera: ${course} Courses`,\n    description: `Online courses in ${course} from top universities and companies.`,\n    url: `https://www.coursera.org/browse/${subject}`,\n    source: 'Coursera'\n  }];\n};\n\n/**\n * Fetch course content from multiple sources\n * @param {string} course - The course name\n * @param {string} emotion - The detected emotion\n * @returns {Promise<Object>} - Object containing resources from different sources\n */\nconst fetchCourseContent = async (course, emotion) => {\n  try {\n    // Fetch YouTube videos\n    const youtubeVideos = await fetchYouTubeVideos(course, emotion);\n\n    // Get resources from other platforms\n    const khanAcademy = getKhanAcademyResources(course);\n    const mitOpenCourseWare = getMITOpenCourseWareResources(course);\n    const coursera = getCourseraResources(course);\n\n    // Combine all resources\n    return {\n      videos: youtubeVideos,\n      resources: [...khanAcademy, ...mitOpenCourseWare, ...coursera]\n    };\n  } catch (error) {\n    console.error(\"Error fetching course content:\", error);\n    return {\n      videos: [],\n      resources: []\n    };\n  }\n};\nexport { fetchCourseContent };","map":{"version":3,"names":["YOUTUBE_API_KEY","RESOURCES","khanAcademy","mitOpenCourseWare","coursera","fetchYouTubeVideos","course","emotion","maxResults","learningStyles","happy","sad","angry","neutral","surprised","fearful","disgusted","excited","content","style","toLowerCase","query","console","log","mockVideos","id","title","description","thumbnail","url","source","videos","courseName","courseVideos","Object","entries","includes","length","Promise","resolve","setTimeout","slice","error","getKhanAcademyResources","topic","topicSlug","getMITOpenCourseWareResources","department","deptSlug","getCourseraResources","subject","subjectSlug","fetchCourseContent","youtubeVideos","resources"],"sources":["F:/MindEase/Symbiot/src/services/courseContentService.js"],"sourcesContent":["/**\n * Service for fetching course content from external APIs\n * Provides dynamic recommendations based on emotion and course\n */\n\n// YouTube API key (in a real app, this would be stored in environment variables)\nconst YOUTUBE_API_KEY = 'AIzaSyATSN1sAjas0MiKmo6RDMdUCZ1aXZReBus';\n\n// List of educational APIs and resources\nconst RESOURCES = {\n  // Khan Academy topics mapping\n  khanAcademy: {\n    \"Computer Science\": \"computer-programming\",\n    \"Mathematics\": \"math\",\n    \"Physics\": \"physics\",\n    \"Chemistry\": \"chemistry\",\n    \"Biology\": \"biology\",\n    \"Economics\": \"economics-finance-domain\",\n    \"Arts & Humanities\": \"humanities\",\n    \"Medicine\": \"health-and-medicine\"\n  },\n\n  // MIT OpenCourseWare departments\n  mitOpenCourseWare: {\n    \"Computer Science\": \"electrical-engineering-and-computer-science\",\n    \"Mathematics\": \"mathematics\",\n    \"Physics\": \"physics\",\n    \"Chemistry\": \"chemistry\",\n    \"Biology\": \"biology\",\n    \"Economics\": \"economics\",\n    \"Business Administration\": \"management\",\n    \"Mechanical Engineering\": \"mechanical-engineering\",\n    \"Civil Engineering\": \"civil-and-environmental-engineering\"\n  },\n\n  // Coursera subject mapping\n  coursera: {\n    \"Computer Science\": \"computer-science\",\n    \"Data Science\": \"data-science\",\n    \"Business\": \"business\",\n    \"Mathematics\": \"math-and-logic\",\n    \"Psychology\": \"psychology\",\n    \"Language Learning\": \"language-learning\",\n    \"Information Technology\": \"information-technology\"\n  }\n};\n\n/**\n * Fetch YouTube videos related to a course and emotion\n * @param {string} course - The course name\n * @param {string} emotion - The detected emotion\n * @param {number} maxResults - Maximum number of results to return\n * @returns {Promise<Array>} - Array of video objects\n */\nconst fetchYouTubeVideos = async (course, emotion, maxResults = 3) => {\n  try {\n    // Create search query based on course and learning style from emotion\n    const learningStyles = {\n      happy: \"interactive engaging\",\n      sad: \"gentle supportive\",\n      angry: \"focused practical\",\n      neutral: \"comprehensive\",\n      surprised: \"innovative creative\",\n      fearful: \"step-by-step guided\",\n      disgusted: \"clear structured\",\n      excited: \"challenging advanced\",\n      content: \"in-depth analytical\"\n    };\n\n    const style = learningStyles[emotion.toLowerCase()] || \"comprehensive\";\n    const query = `${course} ${style} tutorial lecture`;\n\n    console.log(`Searching for: ${query}`);\n\n    // MOCK IMPLEMENTATION - In a real app, this would call the YouTube API\n    // This mock data simulates YouTube API responses for different courses\n    const mockVideos = {\n      \"Computer Science\": [\n        {\n          id: \"zOjov-2OZ0E\",\n          title: \"Introduction to Programming - Basics\",\n          description: \"Learn the fundamentals of programming in this comprehensive tutorial\",\n          thumbnail: \"https://i.ytimg.com/vi/zOjov-2OZ0E/mqdefault.jpg\",\n          url: \"https://www.youtube.com/watch?v=zOjov-2OZ0E\",\n          source: 'YouTube'\n        },\n        {\n          id: \"RBSGKlAvoiM\",\n          title: \"Data Structures Easy to Advanced Course\",\n          description: \"Learn all about data structures in this comprehensive course\",\n          thumbnail: \"https://i.ytimg.com/vi/RBSGKlAvoiM/mqdefault.jpg\",\n          url: \"https://www.youtube.com/watch?v=RBSGKlAvoiM\",\n          source: 'YouTube'\n        }\n      ],\n      \"Mathematics\": [\n        {\n          id: \"WUvTyaaNkzM\",\n          title: \"Calculus 1 - Full College Course\",\n          description: \"Learn Calculus in this full college course\",\n          thumbnail: \"https://i.ytimg.com/vi/WUvTyaaNkzM/mqdefault.jpg\",\n          url: \"https://www.youtube.com/watch?v=WUvTyaaNkzM\",\n          source: 'YouTube'\n        },\n        {\n          id: \"fNk_zzaMoSs\",\n          title: \"Linear Algebra - Full College Course\",\n          description: \"Learn Linear Algebra in this full college course\",\n          thumbnail: \"https://i.ytimg.com/vi/fNk_zzaMoSs/mqdefault.jpg\",\n          url: \"https://www.youtube.com/watch?v=fNk_zzaMoSs\",\n          source: 'YouTube'\n        }\n      ],\n      \"Psychology\": [\n        {\n          id: \"vo4pMVb0R6M\",\n          title: \"Introduction to Psychology\",\n          description: \"Comprehensive introduction to the field of psychology\",\n          thumbnail: \"https://i.ytimg.com/vi/vo4pMVb0R6M/mqdefault.jpg\",\n          url: \"https://www.youtube.com/watch?v=vo4pMVb0R6M\",\n          source: 'YouTube'\n        },\n        {\n          id: \"R-sVnmmw6WY\",\n          title: \"Cognitive Psychology - Attention and Memory\",\n          description: \"Learn about cognitive processes in this detailed lecture\",\n          thumbnail: \"https://i.ytimg.com/vi/R-sVnmmw6WY/mqdefault.jpg\",\n          url: \"https://www.youtube.com/watch?v=R-sVnmmw6WY\",\n          source: 'YouTube'\n        }\n      ]\n    };\n\n    // Find videos for the course or return default videos\n    let videos = [];\n\n    // Try to find exact match\n    if (mockVideos[course]) {\n      videos = mockVideos[course];\n    } else {\n      // Try to find partial match\n      for (const [courseName, courseVideos] of Object.entries(mockVideos)) {\n        if (course.toLowerCase().includes(courseName.toLowerCase()) ||\n            courseName.toLowerCase().includes(course.toLowerCase())) {\n          videos = courseVideos;\n          break;\n        }\n      }\n\n      // If still no match, use Computer Science as default\n      if (videos.length === 0) {\n        videos = mockVideos[\"Computer Science\"];\n      }\n    }\n\n    // Simulate delay for API call\n    await new Promise(resolve => setTimeout(resolve, 500));\n\n    return videos.slice(0, maxResults);\n  } catch (error) {\n    console.error(\"Error fetching YouTube videos:\", error);\n    return [];\n  }\n};\n\n/**\n * Get Khan Academy resources for a course\n * @param {string} course - The course name\n * @returns {Array} - Array of resource objects\n */\nconst getKhanAcademyResources = (course) => {\n  // Find the closest matching topic\n  let topic = null;\n  for (const [courseName, topicSlug] of Object.entries(RESOURCES.khanAcademy)) {\n    if (course.toLowerCase().includes(courseName.toLowerCase())) {\n      topic = topicSlug;\n      break;\n    }\n  }\n\n  if (!topic) {\n    return [];\n  }\n\n  // Return formatted resources\n  return [\n    {\n      title: `${course} Fundamentals`,\n      description: `Learn the basics of ${course} with Khan Academy's comprehensive curriculum.`,\n      url: `https://www.khanacademy.org/${topic}`,\n      source: 'Khan Academy'\n    }\n  ];\n};\n\n/**\n * Get MIT OpenCourseWare resources for a course\n * @param {string} course - The course name\n * @returns {Array} - Array of resource objects\n */\nconst getMITOpenCourseWareResources = (course) => {\n  // Find the closest matching department\n  let department = null;\n  for (const [courseName, deptSlug] of Object.entries(RESOURCES.mitOpenCourseWare)) {\n    if (course.toLowerCase().includes(courseName.toLowerCase())) {\n      department = deptSlug;\n      break;\n    }\n  }\n\n  if (!department) {\n    return [];\n  }\n\n  // Return formatted resources\n  return [\n    {\n      title: `MIT OpenCourseWare: ${course}`,\n      description: `Free MIT courses and materials for ${course}.`,\n      url: `https://ocw.mit.edu/search/?d=${department}`,\n      source: 'MIT OpenCourseWare'\n    }\n  ];\n};\n\n/**\n * Get Coursera courses for a subject\n * @param {string} course - The course name\n * @returns {Array} - Array of resource objects\n */\nconst getCourseraResources = (course) => {\n  // Find the closest matching subject\n  let subject = null;\n  for (const [courseName, subjectSlug] of Object.entries(RESOURCES.coursera)) {\n    if (course.toLowerCase().includes(courseName.toLowerCase())) {\n      subject = subjectSlug;\n      break;\n    }\n  }\n\n  if (!subject) {\n    return [];\n  }\n\n  // Return formatted resources\n  return [\n    {\n      title: `Coursera: ${course} Courses`,\n      description: `Online courses in ${course} from top universities and companies.`,\n      url: `https://www.coursera.org/browse/${subject}`,\n      source: 'Coursera'\n    }\n  ];\n};\n\n/**\n * Fetch course content from multiple sources\n * @param {string} course - The course name\n * @param {string} emotion - The detected emotion\n * @returns {Promise<Object>} - Object containing resources from different sources\n */\nconst fetchCourseContent = async (course, emotion) => {\n  try {\n    // Fetch YouTube videos\n    const youtubeVideos = await fetchYouTubeVideos(course, emotion);\n\n    // Get resources from other platforms\n    const khanAcademy = getKhanAcademyResources(course);\n    const mitOpenCourseWare = getMITOpenCourseWareResources(course);\n    const coursera = getCourseraResources(course);\n\n    // Combine all resources\n    return {\n      videos: youtubeVideos,\n      resources: [...khanAcademy, ...mitOpenCourseWare, ...coursera]\n    };\n  } catch (error) {\n    console.error(\"Error fetching course content:\", error);\n    return { videos: [], resources: [] };\n  }\n};\n\nexport { fetchCourseContent };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}