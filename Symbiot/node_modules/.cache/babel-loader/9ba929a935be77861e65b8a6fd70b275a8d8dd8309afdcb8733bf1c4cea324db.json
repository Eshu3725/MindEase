{"ast":null,"code":"var _jsxFileName = \"F:\\\\Symbiot25\\\\src\\\\pages\\\\Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { auth } from '../firebase';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = 'http://localhost:5000/api'; // Update with your actual backend URL\n\nconst Chatbot = () => {\n  _s();\n  const [messages, setMessages] = useState([{\n    text: \"Hi there! I'm your AI companion. How can I help you today?\",\n    sender: 'bot'\n  }]);\n  const [input, setInput] = useState('');\n  const [isTyping, setIsTyping] = useState(false);\n  const [error, setError] = useState(null);\n  const messagesEndRef = useRef(null);\n  const [mood, setMood] = useState('');\n\n  // Get current user's mood from localStorage if available\n  useEffect(() => {\n    const savedMood = localStorage.getItem('selectedMood');\n    if (savedMood) {\n      try {\n        const parsedMood = JSON.parse(savedMood);\n        setMood(parsedMood.label);\n      } catch (e) {\n        console.error('Error parsing mood:', e);\n      }\n    }\n  }, []);\n\n  // Auto-scroll to bottom of messages\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  }, [messages]);\n\n  // Get user ID for conversation tracking\n  const getUserId = () => {\n    const user = auth.currentUser;\n    return user ? user.uid : 'anonymous';\n  };\n  const handleSendMessage = async e => {\n    e.preventDefault();\n    if (!input.trim()) return;\n\n    // Add user message\n    const userMessage = {\n      text: input,\n      sender: 'user'\n    };\n    setMessages(prev => [...prev, userMessage]);\n    const userInput = input;\n    setInput('');\n    setIsTyping(true);\n    setError(null);\n    try {\n      // First, analyze the emotion in the message\n      const emotionResponse = await fetch(`${API_URL}/ai/analyze-emotion`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          text: userInput\n        })\n      });\n      if (!emotionResponse.ok) {\n        throw new Error('Failed to analyze emotion');\n      }\n      const emotionData = await emotionResponse.json();\n\n      // Then, send the message to the AI chatbot with emotion context\n      const chatResponse = await fetch(`${API_URL}/ai/chat`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          message: userInput,\n          userId: getUserId(),\n          mood: mood || emotionData.primaryEmotion,\n          emotionIntensity: emotionData.intensity\n        })\n      });\n      if (!chatResponse.ok) {\n        throw new Error('Failed to get response from AI');\n      }\n      const data = await chatResponse.json();\n\n      // Add AI response to messages\n      setMessages(prev => [...prev, {\n        text: data.response,\n        sender: 'bot',\n        emotion: emotionData.primaryEmotion,\n        suggestion: emotionData.suggestion\n      }]);\n    } catch (err) {\n      console.error('Error communicating with AI:', err);\n      setError('Sorry, I had trouble responding. Please try again.');\n      setMessages(prev => [...prev, {\n        text: 'Sorry, I had trouble responding. Please try again.',\n        sender: 'bot',\n        isError: true\n      }]);\n    } finally {\n      setIsTyping(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"max-w-4xl mx-auto\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-3xl font-bold text-[#66FCF1] mb-6\",\n      children: \"\\uD83E\\uDD16 AI Companion\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-[#1F2833] rounded-xl shadow-lg overflow-hidden flex flex-col h-[70vh]\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex-1 overflow-y-auto p-4 space-y-4\",\n        children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `flex ${message.sender === 'user' ? 'justify-end' : 'justify-start'}`,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `max-w-[80%] rounded-xl p-3 ${message.sender === 'user' ? 'bg-[#45A29E] text-white' : 'bg-[#0B0C10] text-[#CFC6C7]'}`,\n            children: message.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 15\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSendMessage,\n        className: \"p-4 border-t border-[#45A29E] bg-[#0B0C10]\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: input,\n            onChange: e => setInput(e.target.value),\n            placeholder: \"Type your message...\",\n            className: \"flex-1 bg-[#1F2833] text-[#CFC6C7] p-3 rounded-l-lg focus:outline-none\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"bg-[#66FCF1] text-[#0B0C10] px-4 rounded-r-lg font-semibold\",\n            children: \"Send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot, \"5zD9or6twyflJhzScO8ze64MgOI=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useEffect","useRef","auth","jsxDEV","_jsxDEV","API_URL","Chatbot","_s","messages","setMessages","text","sender","input","setInput","isTyping","setIsTyping","error","setError","messagesEndRef","mood","setMood","savedMood","localStorage","getItem","parsedMood","JSON","parse","label","e","console","_messagesEndRef$curre","current","scrollIntoView","behavior","getUserId","user","currentUser","uid","handleSendMessage","preventDefault","trim","userMessage","prev","userInput","emotionResponse","fetch","method","headers","body","stringify","ok","Error","emotionData","json","chatResponse","message","userId","primaryEmotion","emotionIntensity","intensity","data","response","emotion","suggestion","err","isError","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","index","onSubmit","type","value","onChange","target","placeholder","_c","$RefreshReg$"],"sources":["F:/Symbiot25/src/pages/Chatbot.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { auth } from '../firebase';\n\nconst API_URL = 'http://localhost:5000/api'; // Update with your actual backend URL\n\nconst Chatbot = () => {\n  const [messages, setMessages] = useState([\n    {\n      text: \"Hi there! I'm your AI companion. How can I help you today?\",\n      sender: 'bot'\n    }\n  ]);\n  const [input, setInput] = useState('');\n  const [isTyping, setIsTyping] = useState(false);\n  const [error, setError] = useState(null);\n  const messagesEndRef = useRef(null);\n  const [mood, setMood] = useState('');\n\n  // Get current user's mood from localStorage if available\n  useEffect(() => {\n    const savedMood = localStorage.getItem('selectedMood');\n    if (savedMood) {\n      try {\n        const parsedMood = JSON.parse(savedMood);\n        setMood(parsedMood.label);\n      } catch (e) {\n        console.error('Error parsing mood:', e);\n      }\n    }\n  }, []);\n\n  // Auto-scroll to bottom of messages\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  }, [messages]);\n\n  // Get user ID for conversation tracking\n  const getUserId = () => {\n    const user = auth.currentUser;\n    return user ? user.uid : 'anonymous';\n  };\n\n  const handleSendMessage = async (e) => {\n    e.preventDefault();\n\n    if (!input.trim()) return;\n\n    // Add user message\n    const userMessage = { text: input, sender: 'user' };\n    setMessages(prev => [...prev, userMessage]);\n\n    const userInput = input;\n    setInput('');\n    setIsTyping(true);\n    setError(null);\n\n    try {\n      // First, analyze the emotion in the message\n      const emotionResponse = await fetch(`${API_URL}/ai/analyze-emotion`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          text: userInput\n        }),\n      });\n\n      if (!emotionResponse.ok) {\n        throw new Error('Failed to analyze emotion');\n      }\n\n      const emotionData = await emotionResponse.json();\n\n      // Then, send the message to the AI chatbot with emotion context\n      const chatResponse = await fetch(`${API_URL}/ai/chat`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          message: userInput,\n          userId: getUserId(),\n          mood: mood || emotionData.primaryEmotion,\n          emotionIntensity: emotionData.intensity\n        }),\n      });\n\n      if (!chatResponse.ok) {\n        throw new Error('Failed to get response from AI');\n      }\n\n      const data = await chatResponse.json();\n\n      // Add AI response to messages\n      setMessages(prev => [...prev, {\n        text: data.response,\n        sender: 'bot',\n        emotion: emotionData.primaryEmotion,\n        suggestion: emotionData.suggestion\n      }]);\n    } catch (err) {\n      console.error('Error communicating with AI:', err);\n      setError('Sorry, I had trouble responding. Please try again.');\n      setMessages(prev => [...prev, {\n        text: 'Sorry, I had trouble responding. Please try again.',\n        sender: 'bot',\n        isError: true\n      }]);\n    } finally {\n      setIsTyping(false);\n    }\n  };\n\n  return (\n    <div className=\"max-w-4xl mx-auto\">\n      <h1 className=\"text-3xl font-bold text-[#66FCF1] mb-6\">🤖 AI Companion</h1>\n\n      <div className=\"bg-[#1F2833] rounded-xl shadow-lg overflow-hidden flex flex-col h-[70vh]\">\n        <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n          {messages.map((message, index) => (\n            <div\n              key={index}\n              className={`flex ${message.sender === 'user' ? 'justify-end' : 'justify-start'}`}\n            >\n              <div\n                className={`max-w-[80%] rounded-xl p-3 ${\n                  message.sender === 'user'\n                    ? 'bg-[#45A29E] text-white'\n                    : 'bg-[#0B0C10] text-[#CFC6C7]'\n                }`}\n              >\n                {message.text}\n              </div>\n            </div>\n          ))}\n        </div>\n\n        <form onSubmit={handleSendMessage} className=\"p-4 border-t border-[#45A29E] bg-[#0B0C10]\">\n          <div className=\"flex\">\n            <input\n              type=\"text\"\n              value={input}\n              onChange={(e) => setInput(e.target.value)}\n              placeholder=\"Type your message...\"\n              className=\"flex-1 bg-[#1F2833] text-[#CFC6C7] p-3 rounded-l-lg focus:outline-none\"\n            />\n            <button\n              type=\"submit\"\n              className=\"bg-[#66FCF1] text-[#0B0C10] px-4 rounded-r-lg font-semibold\"\n            >\n              Send\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default Chatbot;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}