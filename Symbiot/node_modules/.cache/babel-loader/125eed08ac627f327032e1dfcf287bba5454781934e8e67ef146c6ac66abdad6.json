{"ast":null,"code":"/**\n * Simple cache utility for storing API responses\n * Helps reduce API calls and improve performance\n */\n\n// Cache storage\nconst cache = {};\n\n// Default cache expiration time (30 minutes)\nconst DEFAULT_EXPIRATION = 30 * 60 * 1000;\n\n/**\n * Get an item from the cache\n * @param {string} key - Cache key\n * @returns {any|null} - Cached value or null if not found/expired\n */\nconst getCachedItem = key => {\n  const cachedItem = cache[key];\n\n  // Return null if item doesn't exist\n  if (!cachedItem) {\n    return null;\n  }\n\n  // Check if item has expired\n  const now = new Date().getTime();\n  if (now > cachedItem.expiration) {\n    // Remove expired item\n    delete cache[key];\n    return null;\n  }\n  return cachedItem.value;\n};\n\n/**\n * Set an item in the cache\n * @param {string} key - Cache key\n * @param {any} value - Value to cache\n * @param {number} expiration - Expiration time in milliseconds (optional)\n */\nconst setCachedItem = (key, value, expiration = DEFAULT_EXPIRATION) => {\n  const now = new Date().getTime();\n  cache[key] = {\n    value,\n    expiration: now + expiration\n  };\n};\n\n/**\n * Clear the entire cache or a specific item\n * @param {string} key - Specific key to clear (optional)\n */\nconst clearCache = (key = null) => {\n  if (key) {\n    delete cache[key];\n  } else {\n    Object.keys(cache).forEach(k => delete cache[k]);\n  }\n};\nexport { getCachedItem, setCachedItem, clearCache };","map":{"version":3,"names":["cache","DEFAULT_EXPIRATION","getCachedItem","key","cachedItem","now","Date","getTime","expiration","value","setCachedItem","clearCache","Object","keys","forEach","k"],"sources":["F:/Symbtest/src/utils/cacheUtil.js"],"sourcesContent":["/**\n * Simple cache utility for storing API responses\n * Helps reduce API calls and improve performance\n */\n\n// Cache storage\nconst cache = {};\n\n// Default cache expiration time (30 minutes)\nconst DEFAULT_EXPIRATION = 30 * 60 * 1000;\n\n/**\n * Get an item from the cache\n * @param {string} key - Cache key\n * @returns {any|null} - Cached value or null if not found/expired\n */\nconst getCachedItem = (key) => {\n  const cachedItem = cache[key];\n  \n  // Return null if item doesn't exist\n  if (!cachedItem) {\n    return null;\n  }\n  \n  // Check if item has expired\n  const now = new Date().getTime();\n  if (now > cachedItem.expiration) {\n    // Remove expired item\n    delete cache[key];\n    return null;\n  }\n  \n  return cachedItem.value;\n};\n\n/**\n * Set an item in the cache\n * @param {string} key - Cache key\n * @param {any} value - Value to cache\n * @param {number} expiration - Expiration time in milliseconds (optional)\n */\nconst setCachedItem = (key, value, expiration = DEFAULT_EXPIRATION) => {\n  const now = new Date().getTime();\n  \n  cache[key] = {\n    value,\n    expiration: now + expiration\n  };\n};\n\n/**\n * Clear the entire cache or a specific item\n * @param {string} key - Specific key to clear (optional)\n */\nconst clearCache = (key = null) => {\n  if (key) {\n    delete cache[key];\n  } else {\n    Object.keys(cache).forEach(k => delete cache[k]);\n  }\n};\n\nexport { getCachedItem, setCachedItem, clearCache };\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA,MAAMA,KAAK,GAAG,CAAC,CAAC;;AAEhB;AACA,MAAMC,kBAAkB,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI;;AAEzC;AACA;AACA;AACA;AACA;AACA,MAAMC,aAAa,GAAIC,GAAG,IAAK;EAC7B,MAAMC,UAAU,GAAGJ,KAAK,CAACG,GAAG,CAAC;;EAE7B;EACA,IAAI,CAACC,UAAU,EAAE;IACf,OAAO,IAAI;EACb;;EAEA;EACA,MAAMC,GAAG,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC;EAChC,IAAIF,GAAG,GAAGD,UAAU,CAACI,UAAU,EAAE;IAC/B;IACA,OAAOR,KAAK,CAACG,GAAG,CAAC;IACjB,OAAO,IAAI;EACb;EAEA,OAAOC,UAAU,CAACK,KAAK;AACzB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,aAAa,GAAGA,CAACP,GAAG,EAAEM,KAAK,EAAED,UAAU,GAAGP,kBAAkB,KAAK;EACrE,MAAMI,GAAG,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC;EAEhCP,KAAK,CAACG,GAAG,CAAC,GAAG;IACXM,KAAK;IACLD,UAAU,EAAEH,GAAG,GAAGG;EACpB,CAAC;AACH,CAAC;;AAED;AACA;AACA;AACA;AACA,MAAMG,UAAU,GAAGA,CAACR,GAAG,GAAG,IAAI,KAAK;EACjC,IAAIA,GAAG,EAAE;IACP,OAAOH,KAAK,CAACG,GAAG,CAAC;EACnB,CAAC,MAAM;IACLS,MAAM,CAACC,IAAI,CAACb,KAAK,CAAC,CAACc,OAAO,CAACC,CAAC,IAAI,OAAOf,KAAK,CAACe,CAAC,CAAC,CAAC;EAClD;AACF,CAAC;AAED,SAASb,aAAa,EAAEQ,aAAa,EAAEC,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}